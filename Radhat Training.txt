https://yourlearning.ibm.com/channel/CNL_LCB_1618900946000 ------------------- 


ENV setup steps for Labs : 

Git hub  :-----------------------------------------------------------------------

Creds for Git repo : https://github.com/harmeet2401/IIBcode_Sessions
username : harmeet2401
password : Gogi!321

token : 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

Git hub  :-----------------------------------------------------------------------


quay.io : -----------------------------------------------------------------------

username : harmeet_singh4
Password: Narinder@667335424

repo name : testrepo

quay.io : -----------------------------------------------------------------------


lab Environment : ---------------------------------------------------------------

Username	whknkc
Password	RHT_OCP4_DEV_PASSWORD	cad14e5aa9e849e7bc30
API Endpoint	RHT_OCP4_MASTER_API	https://api.ap46a.prod.ole.redhat.com:6443
Console Web Application		https://console-openshift-console.apps.ap46a.prod.ole.redhat.com
Cluster Id		1e69d923-f37c-4eaf-9658-41d317640b71


Workstation : username and password--------------
username : student 
password : student 


lab Environment : ---------------------------------------------------------------





1. Why we need the containerisation technology ?
- In traditional OS where we have a single host machine and single VM on a single machine . The shared libereries and dependencies are entangled with the OS installd on top of the OS of host machine .
- Difficulty arrised in Traditional OS architecture : 
  . Can not update or patch the base OS bcse it might update the shared libs and dependencies which might impact the application running .
  . Shared liberaries are utilized equally among many applications running on the same host which can also impact one app running in case we need update in shared lib for another app.
- Container solutions : 	
	Which includes containerisation and allo each app to be deployed in a separate container have its own OS and Liberaried to be used in the applications.
	Also make isolation for security , storage and network.
	container engines available to manage and execute individual containers, including Rocket, Drawbridge, LXC, Docker, and Podman.
	
****IMP : Podman is available in redhat 7.6x version


2. Image : image is a file-system bundle that contains all dependencies required to execute a process: files in the file system, installed packages, available resources, running processes, and kernel modules.

3. Podman is used for interaction with the container tech . We can build or pull th eimage using podman . Its an opensource and it keeps the images into the local repository which overcome the need of client/server architecture and remove the dependencies of daemon thread running on it .
 It has similar syntax of command as the Docker , so no need to learn new tool 
 
4. Limitations os container : 
	.As the number gross for containers in a system , managing the containers which includes (restarting , starting , killing , updating the liberaries etc ) become difficult .
	.In production env the customer wants to execute :
			- auto renewal of the os or lib in the container which can be done by mean of roll-outs etc
			- each orchestration which include maintaing the desired number of containers running .
			- easy resource management across the containers on the base machines
			-  easy scale up and scale down as per the traffic coming or resource utlization 
5. For above issues : Kubernetes is introduced for orchestration of the containers . We can deploy the container across the multiple nodes of kubernetes and allow kubernetes to maintain the count of the container , rolling out new deployments when a change occurs in source code etc

		K8 features :
			Service discovery and load balancing
			Horizontal scaling
			Self healing 
			Automated rollout
			Operators
Operators are packaged Kubernetes applications that also bring the knowledge of the application's life cycle into the Kubernetes cluster. Applications packaged as Operators use the Kubernetes API to update the cluster's state reacting to changes in the application state.


6. Rootless container : 
	As we know many of the containers are created by running th image as a root user user . Most of the images in docker.io runs through the root users.
	But podman and RedhatOpenshift runs container with root users by default.
	
	Commands : 
		1. First run the container and bash to it using the sudo command to run the container as a root user : 
			here you saw that the bash and run command ran is under root user .
			 [student@workstaion ~]$ sudo podman run --rm --name asroot -ti registry.access.redhat.com/ubi8:latest /bin/bash
			 [root@containerID / ]# whoami
			 root 
			 [root@containerID / ]# sleep 1000
			 [student@workstaion ~]$ sudo ps -ef | grep "sleep 1000"  ------------ > run this in a different terminal
			 root        3137    3117  0 10:18 pts/0    00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 1000
		
			 [root@containerID / ]# exit 
			 
		2. Second run the container and bash to it using the normal command to run the container as a normal user : 
			here you saw that the bash and run command ran is under student user . which is the normal user .
			 [student@workstaion ~]$ podman run --rm --name asuser -ti registry.access.redhat.com/ubi8:latest /bin/bash
			 [root@containerID / ]# whoami
			  root 
			 [root@containerID / ]# sleep 1000
			 [student@workstaion ~]$ sudo ps -ef | grep "sleep 2000" | grep -v grep
			student     3345    3325  0 10:24 pts/0    00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /usr/bin/sleep 2000
			
			 [root@containerID / ]# exit 
			 	
		Summary : it means the podman and redhat openshift allow user to run the containers with normAL users .
		
7. Create containerised Services : 
	Q: Use the quay.io/redhattraining/httpd-parent image with the 2.4 tag to start a new container named httpd-basic in the background. Forward port 8080 on the host to port 80 in the container.
	Ans : oc new-app --name=httpd-basic -p 80:8080 quay.io/redhattraining/httpd-parent:2.4
		Using podman  : podman run --name=httpd-basic -d  -p 8080:80 quay.io/redhattraining/httpd-parent:2.4
		
	Q : Test that Apache HTTP server is running inside the httpd-basic container.?
	
	Name of the container we assigned as --name-httpd-basic its really important and helps in bashing inside the container 
	Ans ; podman exec -it httpd-basic /bin/bash  -------> this will bash you inside the container .
		  curl http://localhost:8080 : ----- you can curl it from outside and from inside of the container 

	Q. Customize the httpd-basic container to display Hello World as the message. The container's message is stored in the file /var/www/html/index.html.
	Ans : First do a bash in to the container : podman exec -it containername /bin/bash 
												cd var/www/html/
												vi index.html
												 change the content and save it .
												exit 
								Do a curl https://localhost:8080
								
8. 	Managing container : There are many commands using which we can manage the containers as per the requirement 

some of the commands which is the used the by ethe developers to manager the container .

1. To create and maintain the containers pull , pull , run , exec , rmi , rm , save , load , pause , unpause etc .
2. To search the containers : ps -a : which will give all the contaiers including the running and stop container .
Chekc the OCPCLICommand.txt for creating a myqsl container and then create a table and then run the insert and select query to get the results.


9. Attaching the persistent volume to the container. 

As we know that the storage of the containers are ephemeral and is destroyed when the cotainer is destroyed .
Here we will be mounting the host directory means the base machine on which the podman is running to the directory inside the container so that if the container is delete the file is accessible again from the host directory which is mounted to the folder inside the container.

For example : host machine directoty for dbfiles : /home/student/dbfiles
			  container image have this folder : /var/lib/mysql   -----------> which needs to be mounted to the above folder .
			
Chekc the OCPCLICommand.txt to see the folder creation or the command to mount the host directory to the container folder .

10. Accessing containers : 

When we ran a container rootless there is no IP  address available for accessing the container .
So wecan use -p [<IP address>:][<host port>:]<container port> to map the port of the host to the container port 

example : -p 8080:80 
This example creates an externally accessible container. The value 8080 colon 80 specifies that any requests to port 8080 on the host are forwarded to port 80 within the container.

	
	
Q. You should be able to deploy and manage a persistent database using a shared volume. You should also be able to start a second database using the same shared volume and observe that the data is consistent between the two containers because they are using the same directory on the host to store the MySQL data.

ANS : 
.mkdir -pv /home/student/local/mysql
.sudo semanage fcontext -a -t container_file_t '/home/student/local/mysql(/.*)?' ------Add the appropriate SELinux context for the /home/student/local/mysql directory and its contents.
.sudo restorecon -R /home/student/local/mysql -----------------------------------------Apply the SELinux policy to the newly created directory.
.ls -ldZ /home/student/local/mysql-----------------------------------------------------Verify that the SELinux context type for the /home/student/local/mysql directory is container_file_t.
.podman unshare chown 27:27 /home/student/local/mysql----------------------------------Change the owner of the /home/student/local/mysql directory to the mysql user and mysql group:
.podman run --name mysql-1 -p 13306:3306 -d -v /home/student/local/mysql:/var/lib/mysql/data -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55  -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55  registry.redhat.io/rhel8/mysql-80:1
. podman ps --format="{{.ID}} {{.Names}}"---------------------------------------------- to check if the container started successfully .
. mysql -uuser1 -h 127.0.0.1 -pmypa55 -P13306 items < /home/student/DO180/labs/manage-review/db.sql------------------------ to run the sql file to the mysql 
. podman exec -it mysql-1  mysql -uroot items -e "SELECT * FROM Item"------------------------------------------------- to get the items inserted to DB 

*********Note : Stop the first container now 
start another container as name mysql-2 you will see that the second container will automatially loads up the insert query and data into db aling with table creations becuase of the persistent volume mounted the second container picked up the same data.sql file.

.podman run --name mysql-2 -p 13306:3306 -d -v /home/student/local/mysql:/var/lib/mysql/data -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55  -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55  registry.redhat.io/rhel8/mysql-80:1
. podman ps -a > /tmp/my-containers ------------------------------------------------------------------------ to save the stopped and running containers in a file 
. podman exec -it mysql-2 /bin/bash 
	bash&: mysql -uroot
		mysql> use items ;                     ----------------------------------------- this is to selecte the Dbs.
		mysql> insert into Item (description, done) values ('Finished lab', 1);
		mysql> Select * from Item;


11. Mananging images : 
. Redhat provide various images repositories including the private and public images . 
. redhat provide many advantages for the images :
	Vulnerabilities control 
	security controlled 
	Scanned images 
	Red Hat Enterprise linux compatible images 
	
Quay.io is another tool which allo users to store and download images from or to the private / public repositories.	

Private Repositories : 
	1. update the /etc/containers/registries.conf Edit the registries entry in the [registries.search] section, adding an entry to the values list:

[registries.search]
registries = ["registry.access.redhat.com", "quay.io"]

	2. Secure connections to a registry require a trusted certificate. To support insecure connections, add the registry name to the registries entry in [registries.insecure] section of /etc/containers/registries.conf file:

[registries.insecure]
registries = ['localhost:5000']


- how to search for the  images in the repositoris 
	Approach 1: 
	. In above steps we configured the regitsries 
	. Second log in to the registry using podman login command 
	. use command : podman search [OPtion] imagesname
	Approach 2: using an API exposed by the registries .
	.To list all repositories available in a registry, use the /v2/_catalog endpoint. The n parameter is used to limit the number of repositories to return:

[user@host ~]$ curl -Ls https://myserver/v2/_catalog?n=3
{"repositories":["centos/httpd","do180/custom-httpd","hello-openshift"]}

- how to download the iage to our local : 
	command :  podman pull quay.io/bitnami/nginx
	
	
12. Manipulating Container Images : 

Once we build our app and packaged as a container images now user want to send the images to the other devlopers and on production . Two steps to do for that 
		1. save that image as a .tar file 
		2. push the tr file to the registry .
	
	