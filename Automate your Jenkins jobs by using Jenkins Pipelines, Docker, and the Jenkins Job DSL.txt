
https://ibm-learning.udemy.com/course/learn-devops-ci-cd-with-jenkins-using-pipelines-and-docker/learn/lecture/7237420#overview
Automate your Jenkins jobs by using Jenkins Pipelines, Docker, and the Jenkins Job DSL

Continuous integration : its the process continuous integrate th version control sytem to allow the code pull and allow the build to happen evrytime the commit happens.
Continuous Delivery : its the process in which the continous delivery or deployment of the software and application to the staging env for the testing to proceed and allow production delivry to happen.

process of CI CD pipeline : 
		
		Developer -------------> build -----> test -------> package ----->release ----> production servers
			code 
			save in 
			code verison 
			repo 
			
Install jenkins : 
				on cloud (AWS , Azure , Google )
				Using the virtual box using the ubuntu image and then pull the jenkins image using the docker nstallation on it 
				using Docker engine on windows .
				
1. We can spin up the jenkins on OCP : oc new-app -e OPENSHIFT_ENABLE_OAUTH=true -e VOLUME_CAPACITY=10Gi jenkins-persistent ------ to spin up the jenkins 		

	Steps : 
	
	1. get the git hub url from the project node js project to build using jenkins on ocp https://github.com/wardviaene/docker-demo				
	2. install the plugin needed to run the code project on jenkins in manage plugins 
	3. Create a freestyle project in jenkins ui .
	
	Steps : How to run the docker commands writtern in your dockerfile of your project inside jenkins .
	
		1. Run a container with jenkins image and container name as jenkins : this will run the jenkins server 
		2. Do a bash inside the jenkins container and install docker inside it in the similar way we did on host machine . you can also install the docker plugin fro manage plugin window of jenkins 
		3.  Create create a custom jenkins image , we can do that by creating a Dockerfile 
			FROM jenkins 
			user root 
			some commands to allow jenkins to talk to the docker api
			
		4. Then docker build -t jenkins-docker .
				this will build the image 
		5. Stop the old jenkins and remove it.
		6. now run the new jenkins using the new custom jenkins image . The expose port and url is same for the container and you can login in to the jenkins 
		7. Afer above steps go to the jenkins ui , open the freestyle project you created and in the build steps add an "Docker build nd push"
		
2. jenkins jobs DSL : This the groovy scripts which is the similar code as in Jenkinsfile.
We can write steps , stages , version control system , clean up process.

Steps : 		https://github.com/wardviaene/jenkins-course/
			1. First install the plugi for this JOb DSL also .
			2. restart the jenkins 
			3. enter the job dsl path under "Look on FileSystem" 
			4. save 
			5. build the job  with an erro : "Script have not been approved "
			6. Go to manage jenkins ---> script approval click on it and approve it and build it again 
			7. now open the job in configugre job mode : you will see the job picked up the dsl code values and created a job internal configuration which is called IAAC
			8. Now run build now and the new 
	
3. To get the function to be use in DSL jenkins jobs stages and steps wise ). We can go to https://jenkinsci.github.io/ob-dsl-plugin	
	
	Using Job dsl language just like jenkinsfile we can create a job easily
	
4. Jenkins pipelines.

	1. Jenkins job DSL an be used to create jenkins piplein jobs . As we see a seed job which is a freestyle contains the groovy file name when triggered creates the jenkins JOB.
	2. We can use ORGANISTION folder to detect and scan the repositories and remove the dependency to create new jobs 	
	
	jenkinsfile looks like : 
			example for nodejs code 
			
			node {
			def comit_id
			
				stage ("Scm checkout and compile ")
				{
				
				}
				stage("test stage ")
				{
				}
				
				stage (Docker build/push){
					docker.build(registryhostname/imagename:tagname,".").push();
				
				}
			
			}
			
	Jenkins ----> Pipeline -----> enter the name ----? Select (Pipeline git from SCM)---> Enter the git url and then we have the Jenkinsfile which contains the stages .
	We can mention the folder name for the Jenkinsfile also or if its on root then not need to mention the folder.

5.  Run a docker container from the image build during the test stage and and then remove the container .
	This will help in verifying the image build for verifying the fix or code done.
	
			node {
			def comit_id
			
				stage ("Scm checkout and compile ")
				{
				
				}
				stage("test stage ")
				{
					def mycontainer = docker.image(nodejs:4.8)
					mycontainer.pull() --------------------------------- this will pull the image from the docker registry 
					mycontainer.inside(){ ------------------------------ this will run the container 
						sh 'npm install --only=dev'
							sh 'npm test'
					
					}
				}
				stage("test stage with run command  ")
				{
					def mycontainer = docker.image(mysql:8:3).run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes --rm") -------------------- this can also run the container using mysql image.	
					def mycontainer = docker.image(nodejs:4.8)
					mycontainer.pull() --------------------------------- this will pull the image from the docker registry 
					mycontainer.inside("--link "){ ------------------------------ this will run the container for nodejs and link this container to the mysql icontainr.
							sh 'npm install --only=dev'
							sh 'npm test'
					
					}
					mysql.stop() ------------------------ this will stop the container.
				}
				
				stage (Docker build/push){
					docker.build(registryhostname/imagename:tagname,".").push();
				
				}
			
			}
			
6. Git hub hook for the jenkins pipeline.
	We can use git hub plugin or other version control system plugin to configure the email notification .
   - Pull hook : In this the jenkins will poll the git version control sytem after evry x minutes  to see if there is any change into the code.
   - push : this is a better hook , as the git will send git hub hook rest api request to jenkins when a new code snippet is pushed to the git version hub.
   
   Email extension plugin to send email notification to the developer.
   - plignin : Email Extension Plugin 
			. Enter 	SMTP server : to shoot the emails 
				SMTP username and password.
				
Jenkinsfile 

node {
		
			
				stage ("Scm checkout and compile ")
				{
						print("so far so good")
				}
				stage("test stage ")
				{
					try{
						print ("test failed")
						sh 'exit 1'  ------------------------- this will so there is an error.
					}
					catch(e){
						def subject = "subject "
						def body = "body content"
						
						//sending email.
						emailcontext (subject :  subject , mimetype :'text/html',body:body ,to : 'harmet2401@gmail.com', attahcing : true)
					
					}
					
				}
				
				stage (Docker build/push){
					docker.build(registryhostname/imagename:tagname,".").push();
				
				}
			
			}

7. Slack integration.

			We can integrate Jenkins with slack to start messaging the teams of devloper that a build is broken and it is creating a problem 
		1. Plugin to be used : slack notification plugin.
		2. Go to slakc channel you created and "add a custom integration"
		3. login to slack , then search for the "incoming webhook"  . you will get the webhook url 
		4. Go to the jenkins configurr , there you will see the slack notification plugin you installed and then enter the webhook url you get from above.
		5. now create a jenkins pipeline with the jenkinsfile as follow 
		node {
		
			
				stage ("Scm checkout and compile ")
				{
						print("so far so good")
				}
				stage("test stage ")
				{
					try{
						print ("test failed")
						sh 'exit 1'  ------------------------- this will so there is an error.
					}
					catch(e){
						def subject = "subject "
						def body = "body content"
						
						//sending email.
						slacksend (color :#FF000, message : "Messgae from thejeknins job for slack notfication")
					
					}
					
					throw e;
					
				}
				
				stage (Docker build/push){
					docker.build(registryhostname/imagename:tagname,".").push();
				
				}
			
			}
			
8. Github/Bitbucket integration 			
In this lab the jenkins will scan all the repositories in git hub and will create the pipelines.

	Git hub integration :
		- plugin name : github branch source plugin.
		- goto jenkins ---> new item --> select Github Organisation
		
	Bitbucket integration :
		- plugin name :  bitbucker branch source plugin.
		- goto jenkins ---> new item --> select bitbucket team/project
		
9. JFrog Artefactory integration.
		1. Plugin : JFrong plugin
		2. Go to jfrog and create a user "deploy"
		3. goto jenkins and use deploy user to deploy the artefact to the jfrog.
		
10. Custom api integration
			plugin neede : http request plugin 
			
11. Sonarqube integrations : software to inspect your code snippets			

12. Blue ocean : its a new plugin introduced to jenkins that provides : 
Plugin : blue ocean plugin 
		1. sophistticated UI or a new UI for jenkins 
		2. Pipeline Editor
		3. personlization 
		4. Integration for branch and pull request  :------------ very nice feature added to integrate jenkins with bitbucket and git 
			this features will show the branch and PR realted to the repositories we are building using the pipelines and freestyle jobs . Ocean blue will show tht in new UI
			When you click on new pipeline it will show you step by step veiw to enter the git or bitbucket urls
		5. more prcision .

13. how to access the private repos from jenkins .
			- we can do that by using the ssh-agents which will hold the private key to login to the private repo in git hub 
			- We know that we don't need to give the creds to login and checkout the repo code to build to happen. but for the private repos we have to the give the ssh-agent key for it.
			
			how to generate the ssh-key : 
				command : ssh-keygen 
			how to get the ssh-key for a service  
				command : ssh-keyscan github.com >> to the .ssh folder as a known_hosts on the host from where you want to connect to the guthub.com
				above command will tell the host to trust git hub and there won't b any issues accessing the github.cm