Kubernetes-------------------------------------------------------------------
Kubernetes is similar to docker-swarm used for orchestration.
install docker if not installed : Link to install docker engine : https://docs.docker.com/install/linux/docker-ce/ubuntu/
sudo -i ------------------------------------------- to change to root user 

Now installing kubernetes:--

Below command use on both master and slave:------ as a root user

1. curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

2. cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF

3. apt-get update 

4. apt-get install -y kubelet kubeadm kubectl 


On Master node ------------------------------------------------
1.As a root :  
kubeadm init --apiserver-advertise-address=172.31.6.143 --pod-network-cidr=192.168.0.0/16 --ignore-preflight-errors=NumCPU  

172.31.6.143 --- private IP

To start using your cluster, you need to run the following as a regular user: do exit

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

Run below as a root on slave do [sudo -i] : also open port 6443 
kubeadm join 172.31.6.143:6443 --token etnsnc.3wmu4c24pn7sjfw7 \
    --discovery-token-ca-cert-hash sha256:2471cc0934d121b1d23097f13115c19a4c9290240b9f4bfa526b2e134cfc6235

After running above command on slave , The slave will join the connector	
kubectl get nodes ----------------- will show you all nodes (which are not ready )
We need to use network plugin -        
calico network plugin --------- use that on master
clusterrole.rbac.authorization.k8s.io/calico-node

Below command run with ubuntu user
1. kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
2. kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
3. kubectl get nodes --- will show you ready status

CREATING DEPLOYMENT :---------
DEPLOYMENT in kubernetes is a controller.
PODS -------------- Group of containers
Each container --------- A running images.

yaml deployment file :--------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80


      
--------------------------------
To apply or rUn above file using kubctl
kubectl apply -f nginx.yaml
kubectl get deployment  ----------- will show you the deployment file
kubectl get pods------------------- will show you the pod running nginx image in a container

Creates a service to expose our nginx deployment ----------------
kubectl create service nodeport nginx --tcp=80:80 ------ wil create and expose a service 
														 if we dont mention "nodeport"	then random port will get exposed

kubctl get services ----------- will show the services

NAME         TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE
kubernetes   ClusterIP   10.96.0.1        <none>        443/TCP        72m
nginx        NodePort    10.105.103.234   <none>        80:31056/TCP   3m38s

* here 80:31056  the service kubernetes port 80 is open to 31056 port of the Master machine

docker ps -a ---------------------- on slave we will see containers

kubectl delete service nginx ------------ delete the service
kubectl delete deployment nginx-deployment --- delete the deployment


How to create the INGRESS:----------------------

kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml  ---- create a deployment


kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/baremetal/service-nodeport.yaml  ---- convert the above deployment to a service

kubectl create service clusterip nginx --tcp=80:80 --- create cluster IP is exposed to cluster ip inside kubernetes.

NOW CREATES  AN INGRESS RULES FOR ROUTE THE REQUEST ACCORDINGLY:--------------------

infress yaml file :

apiVersion: extensions/v1betal
kind: Ingress
metadata:
  name: simple-fanout-example
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /nginx
        backend:
          servuceName: nginx
          servicePOrt: 80
------------------------------------
1. kubectl apply -f ingress.yaml ------- service created
2. kubectl get svc -ningress-nginx ---- to see the ingress service Then open the port after looking at the service 
3. https://ip.portuopend/nginx -------------- will point to nginx
4. kubectl apply -f nginx.yaml--------then create the nginx deployment to get the pods

------------Kubernets Dashboards----------
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta1/aio/deploy/recommended.yaml

kubectl edit svc kubernetes-dashboard -n kube-system

-----------------------------------------------------------------------Certification ----------------------------------------------------------
1. Install the IBM Cloud command-line interface (CLI) ----------------------------------------------- https://cloud.ibm.com/docs/cli?topic=cloud-cli-getting-started
ibmcloud ks supported-locations  ----------------------- check for the supported region 
ibmcloud login -r in ------------------------------------------------------------------------------------- enter you email id and pass for IBMcloud website
ibmcloud plugin install container-service -r Bluemix ----------------------------------------------- install kubernetes plugin for ibmcloud to create worker nodes and many things for conainerisations
ibmcloud cs --------------------------------------------------------------------------------------------- manage ibmcloud kuberentes cluster service
ibmcloud plugin list --------------------------------------------------------------------------------- list the plugins
2. Install IBM container registry 
IBM Cloud Container Registry plug-in ------------- get  acess to IBM image store 
ibmcloud plugin install container-registry –r Bluemix ----------------------------------------------- installing container registry 
3. Install the Kubernetes CLI (kubectl)
instal kubectl ---------------https://kubernetes.io/docs/tasks/tools/install-kubectl/

IBM cloud -----------------------------
install -- IBM cli
INstall -- curl 
Install docker 
install IBM kuberneter cluster plugin  -- command to prefix (ibmcloud cs)
instal IBM cloud registry to hold your personel image --- command prefix (ibmcloud cr)
kubectl version ----------- run on master 
ibmcloud plugin list -------- list the plugins 
kubectl -------- tool which allow to run command to kubernetes cluster 
We can use kubectl to deploy applications, inspect and manage cluster resources, and view logs

https://kubernetes.io/docs/tasks/tools/install-kubectl/#before-you-begin - to install kubeCTL
kubectl cluster-info dump ---------- to get kubernetes cluster logs 


after login to IBM cloud just use 
ibmcloud target --cf to point to end point



DEPLOYMENT WORKFLOW :

DEPLY APP USING KUBECTL -------Sends request to API server----- Api get the request and store it in data store (etcd)------ Watchers detects the resource change in data store -------Send notification to controller -----Controller picks the req app and creates pods for desired number ---schduler assign a new pods based on model

KubeLet on a node detects a pod and deploy it to container env like docker].

Kubeproxy  - manages network ttraffic . Allo pods communication s

docker build --tag registry.ng.bluemix.net/my_namespace_harmeet/hello-world .
docker push registry.ng.bluemix.net/my_namespace_harmeet/hello-world
-----------------------------------------------------------------------------------------------------------------
Push an image to IBM Cloud Container Registry
You use the IBM Cloud Container Registry to push or pull an image.

Clone or download the GitHub repository associated with this course.
Change directory to Lab 1:

cd "Lab 1"

Log in to the IBM Cloud CLI. To specify an IBM Cloud region, include the API endpoint.

If you have a federated ID, use ibmcloud login --sso to log in to the IBM Cloud CLI. You know you have a federated ID if the login fails without the --sso and succeeds with the --sso option.

ibmcloud login

Run ibmcloud cr login and log in with your IBM Cloud credentials. This will allow you to push images to the IBM Cloud Container Registry.

Tip: The commands in this lab show the ng region. Replace ng with the region outputted from the ibmcloud cr login command.

Create a namespace in IBM Cloud Container Registry where you can store your images:

ibmcloud cr namespace-add <my_namespace>

Build the example Docker image:

docker build --tag registry.ng.bluemix.net/<my_namespace>/hello-world .

Verify the image is built:

docker images

Push that image to IBM Cloud Container Registry:

docker push registry.ng.bluemix.net/<namespace>/hello-world

Make sure that the cluster you created previously is ready to use:
Run ibmcloud cs clusters and make sure that your cluster is in Normal state.
Run ibmcloud cs workers <yourclustername> and make sure that all workers are in Normal state with a Ready status.
Make a note of the public IP of the worker.
You are now ready to use Kubernetes to deploy the hello-world application.-----
-----------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------
Deploy your app
Get the command to set the environment variable and download the Kubernetes configuration files:
ibmcloud cs cluster-config <cluster_name_or_ID>

When the download of the configuration files is finished, a command is displayed that you can use to set the path to the local Kubernetes configuration file as an environment variable, for example, for OS X:

export KUBECONFIG=/Users/<user_name>/.bluemix/plugins/container-service/clusters/pr_firm_cluster/kube-config-prod-par02-pr_firm_cluster.yml

Copy and paste the command that is displayed in your terminal to set the KUBECONFIG environment variable.

Run your image as a deployment:
kubectl run hello-world --image=registry.ng.bluemix.net/<namespace>/hello-world

This action will take a bit of time. To check the status of your deployment, run this command:

kubectl get pods

You should see output like this:

    => kubectl get pods
    NAME                          READY     STATUS              RESTARTS   AGE
    hello-world-562211614-0g2kd   0/1       ContainerCreating   0          1m
When the status reads Running, expose that deployment as a service, which is accessed through the IP of the worker nodes. The example for this lab listens on port 8080. Run this command:
kubectl expose deployment/hello-world --type="NodePort" --port=8080

Find the port that is used on that worker node and examine your new service:
kubectl describe service <name-of-deployment>

Take note of the “NodePort:” line as <nodeport>.

Run the following command and note the public IP as <public-IP>.
ibmcloud cs workers <name-of-cluster>

You can now access your container/service by using curl <public-IP>:<nodeport> (or a web browser). You're done if you see this:

“Hello world! Your app is up and running in a cluster!”-
----------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------
Scale apps with replicas
A replica is how Kubernetes accomplishes scaling out a deployment. A replica is a copy of a pod that already contains a running service. By having multiple replicas of a pod, you can ensure your deployment has the available resources to handle increasing load on your app.

Update the replica set:

kubectl edit deployment/<name-of-deployment>

Edit the YAML file in the code editor of your choice.

This configuration YAML file is the configuration of your current deployment, which you can edit to customize the configuration for more fault tolerance.

You should see a configuration similar to the this:

    ...
    spec:
      replicas: 1
      selector:
        matchLabels:
          run: hello-world
      strategy:
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            run: hello-world
    ...
Change the replicas number from 1 to 10 so that the configuration now reads:

    ...
    spec:
      replicas: 10
      selector:
        matchLabels:
          run: hello-world
      strategy:
      rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          creationTimestamp: null
          labels:
            run: hello-world
    ...
Save your changes and exit the editor. You now have 10 replicas of the app, which provides fault tolerance.
Watch your changes being rolled out:

kubectl rollout status deployment/<name-of-deployment>

The rollout might occur so quickly that the following messages might not display:

    => kubectl rollout status deployment/hello-world
    Waiting for rollout to finish: 1 of 10 updated replicas are available...
    Waiting for rollout to finish: 2 of 10 updated replicas are available...
    Waiting for rollout to finish: 3 of 10 updated replicas are available...
    Waiting for rollout to finish: 4 of 10 updated replicas are available...
    Waiting for rollout to finish: 5 of 10 updated replicas are available...
    Waiting for rollout to finish: 6 of 10 updated replicas are available...
    Waiting for rollout to finish: 7 of 10 updated replicas are available...
    Waiting for rollout to finish: 8 of 10 updated replicas are available...
    Waiting for rollout to finish: 9 of 10 updated replicas are available...
    deployment "hello-world" successfully rolled out
After the rollout is finished, ensure your pods are running:

kubectl get pods

You should see output listing the 10 pods of your deployment:

    => kubectl get pods
    NAME                          READY     STATUS    RESTARTS   AGE
    hello-world-562211614-1tqm7   1/1       Running   0          1d
    hello-world-562211614-1zqn4   1/1       Running   0          2m
    hello-world-562211614-5htdz   1/1       Running   0          2m
    hello-world-562211614-6h04h   1/1       Running   0          2m
    hello-world-562211614-ds9hb   1/1       Running   0          2m
    hello-world-562211614-nb5qp   1/1       Running   0          2m
    hello-world-562211614-vtfp2   1/1       Running   0          2m
    hello-world-562211614-vz5qw   1/1       Running   0          2m
    hello-world-562211614-zksw3   1/1       Running   0          2m
    hello-world-562211614-zsp0j   1/1       Running   0          2m
Tip: Another way to improve availability is to add clusters and regions to your deployment as shown in the following diagram:


--------------------------------------------------------------------

Kubernetes allows you to use a rollout to update an app deployment with a new Docker image. This allows you to easily update the running image and also allows you to easily undo a rollout if a problem is discovered after deployment.

Before you begin, ensure that you have the image tagged with 1 and pushed:

docker build --tag registry.ng.bluemix.net/<namespace>/hello-world:1 .

docker push registry.ng.bluemix.net/<namespace>/hello-world:1
To update and roll back:

Make a change to your code and build a new docker image with a new tag:

docker build --tag registry.ng.bluemix.net/<namespace>/hello-world:2 .

Push the image to the IBM Cloud Container Registry:

docker push registry.ng.bluemix.net/<namespace>/hello-world:2

Using kubectl, update your deployment to use the latest image. You can do this in two ways:
Edit the YAML file again by using kubectl edit deployment/<name-of-deployment>
Specify a new image by using a single command. Using a single command is especially useful when writing deployment automation. To specify the new image, run this command:
kubectl set image deployment/hello-world hello-world=registry.ng.bluemix.net/<namespace>/hello-world:2

A deployment can have multiple containers in which case each container will have its own name. Multiple containers can be updated at the same time. For more information about setting images, see the kubectl reference documentation.

Check he status of the rollout by running one of these commands:
kubectl rollout status deployment/<name-of-deployment>
kubectl get replicasets
The rollout might occur so quickly that the following messages might not be displayed:

    => kubectl rollout status deployment/hello-world
    Waiting for rollout to finish: 2 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 3 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 3 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 3 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 4 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 4 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 4 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 4 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 4 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 5 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 5 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 5 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 6 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 6 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 6 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 7 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 7 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 7 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 7 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 8 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 8 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 8 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 8 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 9 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 9 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 9 out of 10 new replicas have been updated...
    Waiting for rollout to finish: 1 old replicas are pending termination...
    Waiting for rollout to finish: 1 old replicas are pending termination...
    Waiting for rollout to finish: 1 old replicas are pending termination...
    Waiting for rollout to finish: 9 of 10 updated replicas are available...
    Waiting for rollout to finish: 9 of 10 updated replicas are available...
    Waiting for rollout to finish: 9 of 10 updated replicas are available...
    deployment "hello-world" successfully rolled out
    => kubectl get replicasets
    NAME                   DESIRED   CURRENT   READY     AGE
    hello-world-1663871401   9         9         9         1h
    hello-world-3254495675   2         2         0         <invalid>
    => kubectl get replicasets
    NAME                   DESIRED   CURRENT   READY     AGE
    hello-world-1663871401   7         7         7         1h
    hello-world-3254495675   4         4         2         <invalid>
    ...
    => kubectl get replicasets
    NAME                   DESIRED   CURRENT   READY     AGE
    hello-world-1663871401   0         0         0         1h
    hello-world-3254495675   10        10        10        1m
Confirm that your new code is active:

curl <public-IP>:<nodeport>

Optional: Undo your latest rollout:
kubectl rollout undo deployment/<name-of-deployment>

------------------------------------------------------------------------------------------------------------------------------------