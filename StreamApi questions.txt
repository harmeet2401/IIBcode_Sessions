Filtering and Summing:
Given a list of integers, filter out the even numbers and then calculate the sum of the remaining numbers.

Mapping and Collecting:
Given a list of strings, convert each string to uppercase and then collect them into a new list.

Sorting and Limiting:
Given a list of names, sort them in alphabetical order and then limit the result to the first 5 names.

Grouping and Counting:
Given a list of student objects with attributes like name, age, and grade, group the students by their grade and then count the number of students in each grade.

Finding Max Value:
Given a list of integers, find the maximum value using Stream API.

Checking for Presence:
Given a list of strings, check if the list contains a specific string using Stream API.

Removing Duplicates:
Given a list of integers, remove duplicate elements using Stream API.

Flattening Nested Lists:
Given a list of lists of integers, flatten it into a single list using Stream API.

Mapping Object Properties:
Given a list of student objects, create a new list containing only the names of the students.

Checking Predicate:
Given a list of integers, check if all elements satisfy a specific condition using Stream API.


Answer 1 
list.stream.filter(i->i%2!==0).reduce((a,b)->a+b)
list.stream.filter(i->i%2!==0).collect(Collectors.summingInt())

list.stream().filter(i->i%2!=0).mapToint(Integer::new).sum() : correct 

Answer 2 
list.stream.map(String::uppertCase).collect(Collectors.toList()) : correct

Answer 3 
list.stream.sorted(Comparator.naturalOrder()).limit(5) : correct

Answer 4 
list.stream.collect(Collectors.groupingBy(Student::getGrade()))
.forEach((k)-> System.out.println(k.getKey + "= "+ k.getValues.size()))

public class Main {
    public static void main(String[] args) {
        List<Student> students = ...; // Populate the list of students

        // Group students by grade and count the number of students in each grade
        Map<String, Long> studentsByGradeCount = students.stream()
                .collect(Collectors.groupingBy(Student::getGrade, Collectors.counting()));

        // Print the result
        studentsByGradeCount.forEach((grade, count) -> System.out.println("Grade: " + grade + ", Count: " + count));
    }
}



Answre 5 
list.stream().max(Integer::CompareTo);
list.stream().map(INteger::max(a,b))

Answer 6 
String a  = "check"

boolean a = list.stream().anymatch(s->s.equals(a))

Answer 7 
list.stream().collect(Collectors.toSet());
list.stream().distinct().collect(Collectors.toList())

Answer 8 
List<List<Integer>> list = ArrayList<List<Integer>>
example : [[1,2,3],[3,4,5],[6,7,8]]
Answer will be [1,2,3,4,5,6,7,8]

list.stream().flatMap(List::new).collect(Collectors.Tolist)

Answer 9 
list.stream().map(Students::getname).collect(Collectors.toList)

Answer 10 

list.stream().allmatch(i->i>0)

------------------------------------------------------------------------
Filtering and Mapping:
Given a list of strings, filter out strings containing the letter "a" and then convert the remaining strings to uppercase.
Answer :List<String> list = new ArrayList<String>(); 
list.stream().filter(s-> !s.contains("a")).map(String::UpperCase)

Partitioning:
Given a list of integers, partition the list into two parts: one containing even numbers and the other containing odd numbers.
Answer : List<Integer> list = new ArrayList<Integer>();

list.stream().collect(Collectors.partitionBy(i->i%2==0))

Finding Minimum Value:
Given a list of doubles, find the minimum value using Stream API.
Answer List<Double> list = new ArrayList<Double>();

Optional<Double> min = numbers.stream().min(Double::compare);
list.stream().mapToInt(Integer::new).min()

Checking for Absence:
Given a list of strings, check if the list does not contain any string longer than 10 characters using Stream API.
Answer List<String> list

list.stream().noneMatch((s)-> s.length()>10)


Removing Nulls:
Given a list of strings that may contain null values, remove all null values using Stream API.
Answer List<String> list.

strings.stream().filter(Objects::nonNull).collect(Collectors.toList());
strings.stream().filter((s)-> !s==null).collect(Collectors.toList())


Mapping and Summarizing:
Given a list of products with price attributes, calculate the total price of all products using Stream API.
Answer List<Product> list 

list.stream().mapToint(products -> products.getPrice()).sum();


Grouping and Mapping:
Given a list of employee objects with attributes like department and salary, group the employees by department and calculate the average salary for each department using Stream API.
Answer : 
list.stream().collect(Collectors.groupingBy(employee::getDepartment,Collectors.averageInt(Employee::getSalary)))


Sorting and Distinct:
Given a list of integers, remove duplicate elements, sort them in descending order, and then limit the result to the first 3 elements using Stream API.
Answer 
List<Integer> list = new ArrayList<Integer>();

list.stream().sorted(Comaparator.reverseOrder()).distinct().limit(3).collect(Collectors.toList())


Finding Maximum Length:
Given a list of strings, find the length of the longest string using Stream API.
Answer 
list.stream().collect(Collectors.MaxBy(Comparator.comparing(s.length())))
list.stream().mapToint(String::length).max()

Checking Predicate Negation:
Given a list of integers, check if none of the elements are negative using Stream API.
Answer :

list.stream().noneMatch(i->i<0)
----------------------------------------------------------------------------------------------------

Given a list of integers, filter out the even numbers and then double each of them.
list.stream().filter(i->i%2!=0).map(j->2*j).collect(Collectors.toList()).

Count the number of strings in a list that have length greater than 5.
List<String> list = new arrayList<String>();
list.stream().filter(s->s.length()>5).collect(Collectors.counting())
list.stream().filter(s->s.length()>5).count()


Find the minimum and maximum values in a list of integers.

Asnwer : we can only use the min and max only without giving the comparator also.
list.stream().mapToInt(Integer::new).max(Comaparator.naturalOrder());
list.stream().mapToInt(Integer::new).min(Comaparator.naturalOrder());

Given two lists of integers, create a stream of pairs where each pair contains one element from each list.
List<Integer> list1 = Arrays.asList(1, 2, 3);
List<Integer> list2 = Arrays.asList(4, 5, 6);

This actually kind of loop inside a loop means stream inside a stream 

List<List<Integer>> pairs = list1.stream()
                                .flatMap(i -> list2.stream().map(j -> Arrays.asList(i, j)))
                                .collect(Collectors.toList());
								
System.out.println(pairs); // Output: [[1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6]]

--------------------------------
Find the Maximum Number in a List:

Write a Java program to find the maximum number in a list of integers.

list.stream().MapToint(Integer::new).max(Comparator.naturalOrder());


Calculate the Average of Numbers in a List:

Write a Java program to calculate the average of numbers in a list of integers.
list.stream().MapToFloat(Float::new).collect(Collectors.AverageInt());


Check if a String is Palindrome:

Write a Java program to check if a given string is a palindrome or not.
str = "radar"
boolean isPalindrome = IntStream.range(0, str.length() / 2)   -------------------------- > / operator will give the remainder which is 1 
				.allMatch(i -> str.charAt(i) == str.charAt(str.length() - i - 1));

		if (isPalindrome) {
			System.out.println(str + " is a palindrome.");
		} else {
			System.out.println(str + " is not a palindrome.");
	}



Find the First Non-Repeated Character in a String:
Answer : FIrst save the character occurences in map along with the character key Map<String,Integer>
Str.tocharArray (). Then we can use String.ValueOf(ch) to convert the char to string.
public static void firstNonRepeatingChar(){
		String str = "upinderkaur";
		Map<String , Integer> map = new LinkedHashMap<>();
		for (char c : str.toCharArray()) {
			String strBuild = String.valueOf(c);
			if(map.get(strBuild)!=null){
			if(str.contains(strBuild)){
				map.put(strBuild,map.get(strBuild)+1);
			}
			}else{
				map.put(strBuild,1);
			}
		}
		map.entrySet().forEach(System.out::println);
		System.out.println("The first char which is non repeatable  "+map.entrySet().stream().filter(e->e.getValue()==1).findFirst().get());
}


Remove Duplicates from a List:
list.stream().collect(Collector.ToSet()) to remove the duplocacy
list.stream().distinct().Collect(Collector.tolist());


Write a Java program to sort a list of strings based on their lengths, shortest to longest.
List<Integer> li = list
				.stream()
				.map(String::length)
				.sorted(Comparator.naturalOrder())
				.collect(Collectors.toList());



Write a Java program to calculate the factorial of a given number using Java Streams.
int n  = 6;
		IntStream.rangeClosed(1, n)
				.reduce(1, (a, b) -> a * b);



Write a Java program to generate the Fibonacci series using Java Streams.
Stream<Long> fibonacciStream = Stream.iterate(new long[]{0, 1}, f -> new long[]{f[1], f[0] + f[1]})
                                            .map(f -> f[0])
                                            .limit(count);
