Practice for OCP guided labs : -------------------------

To install and download the podman : https://github.com/containers/podman/blob/main/docs/tutorials/podman-for-windows.md
---------------------------To reslve the issue of Nameservr---------------------

https://github.com/containers/podman/issues/14495

Please check the following command:
wsl -d podman-machine-default cat /etc/resolv.conf
wsl -d podman-machine-default sudo vi  /etc/resolv.conf
wsl -d podman-machine-default sudo vi /etc/containers/registries.conf
The output is something like this:

# This file was automatically generated by WSL. To stop automatic generation of this file, add the following entry to /etc/wsl.conf:
# [network]
# generateResolvConf = false
nameserver 192.168.96.1
If I start the machine with wsl -d podman-machine-default and change /etc/resolv.conf to nameserver 8.8.8.8 the dns resolution is working as expected. (Tried with dnf upgrade -y.)

But I donÂ´t know how the make this setting permanent.

['registry.do180.lab:5000', 'registry.access.redhat.com', 'registry.redhat.io', 'docker.io', 'quay.io']


---------------------------To reslve the issue of Nameservr---------------------

1. Guided Exercise: Creating a MySQL Database Instance : to create this we need an image to create a container instance . We are gong to use POdman for that 
	You should be able to start a database from a container image and store information inside the database.

 - podman run --name mysql-basic -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55  -d registry.redhat.io/rhel8/mysql-80:1
 - podman ps --format "{{.ID}} {{.Image}} {{.Names}}"	
 - podman exec -it mysql-basic /bin/bash
	# mysql -uuser1 -pmypa55 items
	# CREATE TABLE Projects (id int NOT NULL, name varchar(255) DEFAULT NULL, code varchar(255) DEFAULT NULL, PRIMARY KEY (id));
	# insert into Projects (id, name, code) values (1,'DevOps','DO180');
	# Select * from Projects;

2. Guided Exercise: Exploring root and rootless containers : in ths we will be creating container using the id other than root .
	You should be able to see the UIDs for processes running inside containers.
	As a root user :
	-sudo podman run --name asroot -rm -ti registry.access.redhat.com/ubi8:latest /bin/bash ---- will run the container and bashed inside the container.
		# whoami
		  root
		# id 
			uid=root , gid root etc
		# sleep 10000		
	-sudo ps -ef | grep "sleep 10000"
		root soething something 
	
	As a normal user : 
	-podman run --name asauser -rm -ti registry.redhat.io/rhel8/ubi8:latest /bin/bash
		# whoami 
			root
		# id
			uid=root and gid something 
		# sleep 10000
			
	- sudo ps -ef 	| grep "sleep 10000" | grep -v grep
		student something something
		
3.  Creating containerised service 
	You should be able to start and customize a container using a container image.
	- podman run --name httpd-basic -p 8080:80 -d quay.io/redhattraining/httpd-parent:2.4 -- to run the apache server http listening on defult port 80 on container.
	- curl localhost:8080
	- podman exec  -it httpd-basic /bin/bash  ----- podman exec httpd-basic /bin/bash -c 'echo "Hello world-2" > /var/www/html/index.html;'
		# cd /var/www/html/
		# vi index.html
		# edit change the message 
			or 
		# echo "Hello world" >>	/var/www/html/index.html
		#  curl localhost:80
			it will show you hello world 
		exit 
	- curl localhost:8080
		Hello world
	
**** NOTE  : AGAR CONTAINER KE ANDR KOI COMMAND BASH KI RUN KRNI HAI HOST MACHINE(BASE) SE TO WE CAN USE "PODMAN EXEC CONTAINERNAME /BIN/BASH -c 'commandtorun'"
and -e for the sql queries to run for the mysql db
		
4. Guided Exercise: Managing a MySQL Container	 :https://www.redhat.com/sysadmin/run-podman-windows
	You should be able to create and manage a MySQL database container
	
	- podman run --name mysql -d registry.redhat.io/rhel8/mysql-80:1 ---- this will not start the mysql as it need env variblae(username , password , db name etc )
	- podman run --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 -d registry.redhat.io/rhel8/mysql-80:1
	- podman ps -- to show the container created by the name of mysql
	- podman cp /home/student/DO180/labs/manage-lifecycle/db.sql mysql:/ --- to copy the esql file from hostmachine to container root directory
	
	As copy is not working on windows we can use -v to mount the folder which contains the data.sql file below command 
	- podman run --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 -v C:/Users/IBMADMIN/sqlfiles:/data_sql -p 13306:3306 -d registry.redhat.io/rhel8/mysql-80:1
	
	- podman exec mysql /bin/bash -c 'mysql -uuser1 -pmypa55 items < /data.sql' ----- "-c" is verry imp if to run a bash command from hostmachine to container 
	- podman exec mysql /bin/bash -c 'mysql -uuser1 -pmypa55 -e "select * from items.Projects;"'  ------ "-e" is very important to run any sql quesry from hostmachine to container.
	   or 
	  podman exec mysql /bin/bash -c 'mysql -uuser1 -pmypa55 items -e "select * from Projects;"'  ------ "-e" is very important to run any sql query from and here "items" db was writtern before -e instead of "items.project"
	
5. Guided Exercise: Create MySQL Container with Persistent Database.
you will create a container that stores the MySQL database data into a host directory.
- SELinux : Processes and files are labeled with an SELinux context that contains additional information, such as an SELinux user, role, type, and, optionally, a level.
	
	- mkdir -pv /home/student/local/mysql
	- sudo semanage fcontext -a -t container_file_t '/home/student/local/mysql(/.*)?' --- to create a policy for the folder(PV)
	- sudo restorecon -R /home/student/local/mysql                                   --- to apply the above policy to folder 
	- ls -ldZ /home/student/local/mysql --- just to check the SELinux policy applied
	- podman unshare chown 27:27 /home/student/local/mysql --to change UID for the folder to 27 as this is the  mounted path for mysql so mysql user have UID of 27 same user honge tbhi access hogga. and the mysql container will be runing using mysql user with UID as 27 and container will try to access mysql folder.
	- podman login registry.redhat.io
	- podman pull registry.redhat.io/rhel8/mysql-80:1
	- podman run --name persist-db -v /home/student/local/mysql:/var/lib/mysql/data -e MYSQL_DATABASE=items -e MYSQL_PASSWORD=mypa55 -e MYSQL_USER=user1 -e MYSQL_ROOT_PASSWORD=r00tpa55 -d  registry.redhat.io/rhel8/mysql-80:1   ------ -v is the option to attach the persistence volume to the container.
	- For Windows : podman run --name mysql-persist -e MYSQL_DATABASE=items -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 -v C:/Users/IBMADMIN/mysql:/var/lib/mysql/data -p 13307:3306 -d registry.redhat.io/rhel8/mysql-80:1
	- podman ps 
	- check the items folder created under /home/student/local/mysql folder 
	- podman ps -a >> /tmp/my-containers -- to save the stopped container file to a flie 
	Note :  The items directory stores data related to the items database that was created by this container. If the items directory does not exist, then the mount point was not defined correctly during container creation.		
		
			
6. Guided Exercise: Loading the Database
	In this case we will be running the db.sql using the port forwarding method.
	- podman login registry.redhat.io
	- podman run --name mysqldb-port -v /home/student/local/mysql:/var/lib/mysql/data -e MYSQL_DATABASE -e MYSQL_USER -e MYSQL_PASSWORD -e MYSQL_ROOT_PASSWORD -p 13306:3306 -d registry.redhat.io/rhel8/mysql-80:1
	- mysql -uuser1 -h 127.0.0.1 -pmypa55 -P13306 items < /home/student/DO180/labs/manage-networking/db.sql    --- "-h is important"
	- podman exec mysqldb-port /bin/bash -c 'mysql -uuser1 -pmypa55 items -e "select * from Item;"'
	  			OR
	  mysql -uuser1 -h 127.0.0.1 -pmypa55 -P13306 items -e "Select * from Item;"
	
	- podman exec -it mysqldb-port /bin/bash 
		# mysql -uuser1 -pmypa55 items -e "Select * from Item"
		
		
VVVVVVVVVIMP NOTE : jab mysql yan container commands run krni ho use portforward and use -e to run the query and if no port forward then using podman run exec for the container /bin/bash and use -c to pass the entire container command like mysql -uuser .........-e "select * from Item;".		


7. 	Guided Exercise: Creating a Custom Apache Container Image
	We will be able to run a apache container and then create an image from it , then tag it , then push it to quay.io
	- podman run --name official-httpd -p 8180:80 quay.io/redhattraining/httpd-parent
	- podman ps 
	- podman exec -it official-httpd /bin/bash
		# echo "D0180 page" > /var/www/html/index.html
		# exit
	- curl localhost:8180
		== DO180 page 
	- podman stop official-httpd
	- podman commit -a "harmeet singh" official-httpd do180-custom-httpd
	- podman images 
	- podman tag localhost/do180-custom-httpd quay.io/harmeet_singh4/do180-custom-httpd:v1.0
	- podman images 
	- podman push quay.io/harmeet_singh4/do180-custom-httpd:v1.0
	- podman pull -q quay.io/harmeet_singh4/do180-custom-httpd:v1.0
	- podman run --name test-httpd -p 8280:80 -d quay/harmeet_singh4/do180-custom-httpd:v1.0
	- podman ps 
	- curl localhost:8280
		== DO180 page
	
8. Lab: Managing Images : Questions asking for commands
	- podman pull -q quay.io/redhattraining/nginx:1.17
	- podman images 
	- podman run --name official-nginx -p 8080:80 -d quay.io/redhattraining/nginx:1.17
	- podman ps
	- podman exec -it official-nginx /bin/bash
		# echo "DO180" > /usr/share/nginx/html/index.html
		# Exit
	- curl 0.0.0.0:8080 
	- podman stop official-nginx
	- podman commit -a 'Harmeet Singh' official-nginx do180/mynginx:v1.0-SNAPSHOT
	- podman images 
	- podman run --name  official-nginx-dev -p 8080:80 -d do180/mynginx:v1.0-SNAPSHOT
	- podman exec -it official-nginx-dev /bin/bash
		# echo "DO180 Page" > /usr/share/nginx/html/index.html
		# Exit
	- curl 0.0.0.0:8080 
	- podman stop official-nginx-dev
	- podman commit -a 'Harmeet Singh' official-nginx-dev do180/mynginx:v1.0
	- podman images 
	- podman rm official-nginx-dev
	- podman rmi do180/mynginx:v1.0-SNAPSHOT
	- podman images 
	- podman run --name my-nginx -p 8280:80 -d do180/mynginx:v1.0
	- curl 0.0.0.0:8280
	  == D0180 Page 
	
9. Guided Exercise: Creating a Basic Apache Container Image
You should be able to create a custom Apache container image built on a Red Hat Universal Base Image 8 image. using the builder file or containerfile or dockerfile
		Yum is used in Red Hat Enterprise Linux (RHEL)
	- Create the containerfile to build an apache images  : vim /home/student/DO180/labs/dockerfile-create/Containerfile
	  
	  FROM ubi8/ubi:8.3
	  MAINTAINER 'Harmeet Singh' 'Harmeet.singh4@ibm.com'
	  LABEL description='A custom Apache container based on UBI 8'
	  RUN yum clean update && yum install -y httpd && yum clean all ------------------------------- yum commands run in linux system .
	  RUN echo "Hello from Containerfile" > /var/www/html/index.html 
	  EXPOSE 80  -------------------------------------------------------- this is the container port
	  CMD ["httpd","-D","FOREGROUND"]
	- podman build --layers=false -t do180/apache .
	- podman images 
	- podman run --name lab-apache -p 10080:80 -d do180/apache
	- podman ps 
	- curl 0.0.0.0:10080
	 == Hello from Containerfile
	 
	 For nginx i wrote this container : 
	  FROM ubi8/ubi:8.3
	  MAINTAINER 'Harmeet Singh' 'Harmeet.singh4@ibm.com'
	  LABEL description='A custom nginx container based on UBI 8'
	  RUN yum install -y nginx && yum clean all ------------------------------- yum commands run in linux system.
	  EXPOSE 80
	  RUN echo "DO180 Page" > /usr/share/nginx/html/index.html
	  CMD ["nginx","-g","daemon off;"]

10. Lab: Creating Custom Container Images : Questions asking some commands. note : sed commands is used to replace a part of the string in a file 
	- vi /home/student/DO180/labs/dockerfile-review/Containerfile
		- FROM ubi8/ubi:8.3
		  MAINTAINER 'Harmeet Singh' 'Harmeet.singh4@ibm.com'
		  ENV PORT 8080
		  RUN yum install -y httpd && yum clean all 
		  RUN sed -ri -e "/^Listen 80/c\Listen ${PORT}" /etc/httpd/conf/httpd.conf && chown -R apache:apache /etc/httpd/logs/ && chown -R apache:apache /run/httpd/
		  USER apache 
		  EXPOSE ${PORT}
		  COPY ./src/ /var/www/html/
		  CMD ["httpd", "-D", "FOREGROUND"]
	  
	- podman build --layers=false -t do180/custom-apache .
	- podman images 
	- podman run --name containerfile -p 20080:8080 -d do180/custom-apache
	- curl 0.0.0.0:20080
		== <html>
				<header><title>DO180 Hello!</title></header>
				<body>
					Hello World! The containerfile-review lab works!
				</body>
		   </html>
		   
	VVVVVVVVVIMP note : if you want to run commands in a single line use RUN command and && to separate the commands.	   
		   
11. Guided Exercise: Deploying a Database Server on OpenShift : Means we are going to deploy an app on OCP which will create all OCP resources : buildconfig , build , deploymentconfig , service , route etc . Using oc commands
You should be able to create and deploy a MySQL database pod on OpenShift.		
    - oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
    - oc new-project ${RHT_OCP4_DEV_USER}-mysql-openshift
	- oc new-app --template=mysql-persistent -p MYSQL_USER=user1 -p MYSQL_PASSWORD=mypa55 -p MYSQL_DATABASE=testdb -p MYSQL_ROOT_PASSWORD=r00tpa55 -p VOLUME_CAPACITY=10Gi
	- oc status 
	- oc describe pod mysql-1-5vfn4
	- oc get svc
	- oc describe svc servicename
	- oc get pvc
	- oc describe pvc pvcname 
	- oc port-forward podname 13306:3306
		port-forward 13306:3306------>
		port-forward 13306:3306------>
		
	Open a new terminal for below : ab port forward hogya hai bs you can run using mysql -uuser1 -pmypa55 -P3306 testdb -e "show databases;" NICHE SAARI COMMANDS UPR PORT FORWARD PR RIDIRECT HOJAENGI KYUNKI NICH MAI -P13306 use krra hun
	- mysql -uuser1 -pmypa55 --protocol tcp -h 127.0.0.1	
	- mysql -uuser1 -pmypa55 -P3306 testdb -e "show databases;"	
	- mysql -uuser1 -pmypa55 -P3306 testdb -e "CREATE TABLE PROJECTS(ID INT NOT NULL , NAME VARCHAR(255) NULL);"	
	- mysql -uuser1 -pmypa55 -P3306 testdb -e "INSERT INTO PROJECTS (ID,NAME) VALUES(1,'HARMEET SING');"
	- mysql -uuser1 -pmypa55 -P3306 testdb -e "SELECT * FROM PROJECTS;"
	  or i can write all sql queries in a db.sql file and run below command 
	- mysql -uuser1 -pmypa55 -h 127.0.0.1 -P3306 items < db.sql
	
12. Guided Exercise: Exposing a Service as a Route : to create an internet accessible service by exposing the service.
	We will be able to deploy a service on ocp using a an image in oc new-app command 
	
    - oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
    - oc new-project ${RHT_OCP4_DEV_USER}-mysql-openshift
	- oc new-app --name php-helloworld --docker-image=quay.io/redhattraining/php-hello-dockerfile 
	- oc status
	- oc get svc
	- oc describe svc svcname
	- oc expose svc svcname 
	    OR
	- oc expose svc/php-helloworld --name=${RHT_OCP4_DEV_USER}-xyz	 : -- when we want to create a route of specified name 
	
	- oc get routes
	- curl route urlcreatedaboveusingexposecommand
		or 
	  curl ${RHT_OCP4_DEV_USER}-xyz-${RHT_OCP4_DEV_USER}-route.${RHT_OCP4_WILDCARD_DOMAIN}
	  
13. Guided Exercise: Creating a Containerized Application with Source-to-Image  Step : RUN /usr/libexec/s2i/assemble is the script that runs and create the image 
	You should be able to:
		Build an application from source code using the OpenShift command-line interface.
		Verify the successful deployment of the application using the OpenShift command-line interface.	  
	- git clone https://github.com/harmeet2401/DO180-apps.git
	- git checkout master
	- git checkout -b s2i 
	- git push -u origin s2i
	- oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
    - oc new-project ${RHT_OCP4_DEV_USER}-s2i
	- oc new-app php:7.3 --name php-helloworld https://github.com/harmeet2401/DO180-apps.git#s2i --context-dir=php-helloworld
	- oc describe deployment/php-helloworld
	- oc expose service php-helloworld --name ${RHT_OCP4_DEV_USER}-helloworld
	- curl therouteurls
	- update the index.html to some message
	- git add .
	- git commit -m ""
	- git push
	- oc get bc
		php-helloworld source git@s2i 2
	- oc start-build bc/php-helloworld	
	
14. Lab: Deploying Containerized Applications on OpenShift using S2I
Outcomes

You should be able to create an OpenShift application and access it through a web browser.	
	
	- source /usr/local/etc/ocp4.config
	- oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
    - oc new-project ${RHT_OCP4_DEV_USER}-ocp
	- oc new-app --name temps php:7.3 https://github.com/RedHatTraining/DO180-apps --context-dir=temps
	- oc status
	- oc logs -f bc/temps
	- oc expose svc/temps
	- curl url

15. Guided Exercise: Deploying the Web Application and MySQL on Linux Containers and we will use many shell scripts to do that.
	We will build one image which is an api that access a DB mysql. Containerfile to be used to build the image for the api.
	Run the cotainer for api
	run thecontainer for the db mysql image mysql-80:1
	Then curl the url for api 
	script files used :
	1. Containerfile : holds the steps to create an image of the todoapi
	2. build.sh : this holds the script to run the podman build command to use Containerfile to create the image 
	3. run.sh : this contains the command : node app.js  to run the mysql and todoapi 
	
	- podman login registry.redhat.io
	- check the /home/student/DO180/labs/multicontainer-design/deploy/nodejs/Containerfile file 
	- check the /home/student/DO180/labs/multicontainer-design/deploy/nodejs/nodejs-source/models/db.js node js script for api to access DB in mysql contains env for db mysql 
	- cd ~/DO180/labs/multicontainer-design/deploy/nodejs
	- ./build.sh  ----- script holds the podman build --layers=false -t do180/todonodejs --build-arg NEXUS_BASE_URL=${RHT_OCP4_NEXUS_SERVER} to build the todoapi image  
	- podman images 
	- ./run.sh edit to add below podman run command :  /home/student/DO180/labs/multicontainer-design/deploy/nodejs/networked
		# In the same run.sh file, insert another podman run command at the appropriate line to run the todoapi container. The following screen shows the docker command to insert into the file.
			.podman run -d --name todoapi -e MYSQL_DATABASE=items -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -p 30080:30080 do180/todonodejs
			.podman run -d --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 -v $PWD/work/data:/var/lib/mysql/data -p 30306:3306 registry.redhat.io/rhel8/mysql-80:1
	- ./run.sh	
	- mysql -uuser1 -h 172.25.250.9 -pmypa55 -P30306 items < /home/student/DO180/labs/multicontainer-design/deploy/nodejs/networked/db.sql
	- curl http://127.0.0.1:30080/todo/api/items/1

16. Guided Exercise: Creating an Application on OpenShift : now we are going to creat above containers on OCP using oc command line interface
	- source /usr/local/etc/ocp4.config
	- oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
	- oc new-project ${RHT_OCP4_DEV_USER}-application
	- cd /home/student/DO180/labs/multicontainer-application
	- oc create -f todo-app.yml                                 ----------------- using the yaml template  file on local .
	- oc port-forward mysql 3306:3306
	- mysql -uuser1 -pmypa55 -h 127.0.0.1 -P3306 items < db.sql
	- oc expose svc todoapi 
	
17. Guided Exercise: Creating an Application with a Template : we will create an app using the template 
	- source /usr/local/etc/ocp4.config
	- oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
	- oc new-project ${RHT_OCP4_DEV_USER}-template
	- cd /home/student/DO180/labs/multicontainer-application
	- oc process -f todo-template.json | oc create -f - 
	- oc port-forward mysql 3306:3306
	- mysql -uuser1 -pmypa55 -h 127.0.0.1 -P3306 items < db.sql
	- oc expose svc todoapi 

18. Lab: Deploying Multi-Container Applications : questions to answer using the command
	- oc login -u ${RHT_OCP4_DEV_USER} -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
	- oc new-project ${RHT_OCP4_DEV_USER}-deploy
	- cd /home/student/DO180/labs/multicontainer-review
	- cd images/mysql 
	- podman login registry.redhat.io
	- podman build -t do180-mysql-80-rhel8 .
	- podman login quay.io
	- podman tag localhost/do180-mysql-80-rhel8 quay.io/harmeet_singh4/do180-mysql-80-rhel8
	- podman push quay.io/harmeet_singh4/do180-mysql-80-rhel8
	- podman tag quay.io/harmeet_singh4/do180-mysql-80-rhel8 quay.io/harmeet_singh4/do180-mysql-80-rhel8:v1_0-SNAPSHOT
	
	- podman build -t do180-quote-php .
	- podman tag do180-quote-php quay.io/${RHT_OCP4_QUAY_USER}/do180-quote-php
	- podman push quay.io/${RHT_OCP4_QUAY_USER}/do180-quote-php
	- podman tag quay.io/harmeet_singh4/do180-quote-php quay.io/harmeet_singh4/do180-quote-php:v1_0-SNAPSHOT
	- podman push quay.io/harmeet_singh4/do180-quote-php:v1_0-SNAPSHOT
	
	- cd /home/student/DO180/labs/multicontainer-review/
	- oc create -f quote-php-template.json
	- oc process quote-php-persistent -p RHT_OCP4_QUAY_USER=${RHT_OCP4_QUAY_USER} | oc create -f -  ------ -p is given only in the case when there is parameters mentioned in .json template file 
	- oc status
	- oc get pods -w
	- oc expose svc quote-php
	- oc get route 
	- curl -w "\n" http://quote-php-${RHT_OCP4_DEV_USER}-deploy.${RHT_OCP4_WILDCARD_DOMAIN}
	
19. Guided Exercise: Troubleshooting an OpenShift Build	
You should be able to identify and solve the problems raised during the build and deployment process of a Node.js application.
	- git checkout master
	- git checkout -b troubleshoot-s2i
	- git push -u origin troubleshoot-s2i
	- oc login -u "${RHT_OCP4_DEV_USER}" -p "${RHT_OCP4_DEV_PASSWORD}"
	- oc new-project ${RHT_OCP4_DEV_USER}-nodejs
	- oc new-app --name nodejs-hello --context-dir=nodejs-helloworld https://github.com/${RHT_OCP4_GITHUB_USER}/DO180-apps#troubleshoot-s2i -i nodejs:12  --build-env  npm_config_registry=http://${RHT_OCP4_NEXUS_SERVER}/repository/npm-proxy
	The --build-env option defines an environment variable to the builder pod. In this case, it provides the npm_config_registry environment variable to the builder pod, so it can reach the NPM registry.
	
	- oc get pod -w
	- oc start-build bcname
	- oc expose svc svcname
	- curl -w "\n" http://nodejs-hello-${RHT_OCP4_DEV_USER}-nodejs.${RHT_OCP4_WILDCARD_DOMAIN}
	
20. Guided Exercise: Configuring Apache Container Logs for Debugging	
You should be able to configure an Apache httpd container to send debug logs to stdout and view them using the podman logs command.
 The default log level for the Apache httpd image is warn. Change the default log level for the container to debug, and redirect log messages to stdout by overriding the default httpd.conf configuration file. To do so, create a custom image from the workstation VM.
    - cat  /home/student/DO180/labs/troubleshoot-container/conf/httpd.conf
	- cd ~/DO180/labs/troubleshoot-container
	- add below lines in httpd.conf
		# ErrorLog "/dev/stdout"
		# LogLevel debug
		# CustomLog "/dev/stdout" common
	- podman build -t troubleshoot-container .	
	- podman run --name troubleshoot-container -p 10080:80 -d troubleshoot-container 
	- podman logs -f troubleshoot-container : logs will have debug logs also 
	- curl http://127.0.0.1:10080
			== hellow from containe 
			
21 : Lab: Troubleshooting Containerized Applications

	- oc new-app --name nodejs-dev -i nodejs:12 https://github.com/${RHT_OCP4_GITHUB_USER}/DO180-apps#troubleshoot-review  --context-dir nodejs-app --build-env npm_config_registry= http://${RHT_OCP4_NEXUS_SERVER}/repository/npm-proxy.
	- sed -i s/4.20/4.x/ package.json
	- git add .
	- git commit -m ""
	- git push
	- oc start-build bc/bcname
	- sed -i s/http-error/html-errors/ server.js
	- git add .
	- git commit -m ""
	- git push
	- oc start-build bc/bcname 
	- oc get svc
	- oc expose svc svcname 
	- oc get route 
	- curl routeurl
	
22. Lab: Containerizing and Deploying a Software Application
You should be able to:

Write a Containerfile that successfully containerizes a Nexus server
Build a Nexus server container image and deploy it using Podman.
Deploy the Nexus server container image to an OpenShift cluster.
	-  cd  /home/student/DO180/labs/comprehensive-review
	- curl -v 127.0.0.1:18081/nexus/ 2>&1  | grep -E 'HTTP|<title>'
 ===	GET /nexus/ HTTP/1.1  HTTP/1.1 200 OK
	- podman push localhost/nexus:latest quay.io/${RHT_OCP4_QUAY_USER}/nexus:latest
	- envsubst < resources/nexus-deployment.yaml  | oc create -f -
	- oc expose svc/nexus
	- oc get route -o yaml

23. Run the comprehensive-review lab carefully and it will help a lot.	

Linux command to keep on your toes:
man : to see the helping guide for any command 
ls  : to list the files :
ls -ltr 
pwd : to see the dir
sudo : to use the root user 
cp  : to copy the files .
mv : to move the files
mkdir : to make a directory 
rmdir : to remove a directory 
rm : to remove a file 
touch : to create an empty file 
locate : to the locate a file 
find : to find a string in a text 
grep : to list the files or text which contains the source string provided.
tail : to see the tail lines of a file 
df : to see the disk space 
du
head : to see the top line of a file 
diff : to see the differece made to the file 
chmod : to change the read , write access to the file or folder 
chmown  : to change the owner of the folder or file.
jobs 
kill : to kill the process 
ping : to ping the servere 
wget : to send an http request to the open api or webservices.
echo : 
zip  : zip file.zip note.txt ---- this will compress the note.txt into the file.zip file 
unzip : unzip file.zip ------ to extract the data to the current directory .
useradd : useradd John
passwd: passwd 123456789
apt-get : apt-get upgrade , apt-get install , apt-get update , apt-get check
vi : vi filename.txt     ----- editor to edit the file linux 
nano : nano filename.txt  ----- editor to edit the file in centos and RHEL flavour of linux 
su : to run the command as a different user.

