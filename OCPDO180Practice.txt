Practice for OCP guided labs : -------------------------

1. Guided Exercise: Creating a MySQL Database Instance : to create this we need an image to create a container instance . We are gong to use POdman for that 
 - podman run --name mysql-basic -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55  -d registry.redhat.io/rhel8/mysql-80:1
 - podman ps --format "{{.ID}} {{.Image}} {{.Names}}"	
 - podman exec -it mysql-basic /bin/bash
	# CREATE TABLE Projects (id int NOT NULL, name varchar(255) DEFAULT NULL, code varchar(255) DEFAULT NULL, PRIMARY KEY (id));
	# insert into Projects (id, name, code) values (1,'DevOps','DO180');
	# Select * from Projects;

2. Guided Exercise: Exploring root and rootless containers : in ths we will be creating container using the id other than root .
	As a root user :
	-sudo podman run --name asroot  -rm -ti registry.redhat.io/rhel8/ubi8:latest /bin/bash
		# whoami
		# root
		# id 
			uid=root , gid root etc
		# sleep 10000		
	-sudo ps -ef | grep "sleep 10000"
		root soething something 
	
	As a normal user : 
	-podman run --name asauser -rm -ti registry.redhat.io/rhel8/ubi8:latest /bin/bash
		# whoami 
			root
		# id
			uid=root and gid something 
		# sleep 10000
			
	- sudo ps -ef 	| grep "sleep 10000" | grep -v grep
		student something something
		
3.  Creating containerised service 
	- podman run --name httpd-basic -p 8080:80 -d quay.io/redhattraining/httpd-parent:2.4 -- to run the apache server http 
	- curl localhost:8080
	- podman exec  -it httpd-basic /bin/bash
		# cd /var/www/html/
		# vi index.html
		# edit change the message 
			or 
		# echo "Hello world ">>	/var/www/html/index.html
		#  curl localhost:80
			it will show you hello world 
		exit 
	- curl localhost:8080
		Hello world
		
4. Guided Exercise: Managing a MySQL Container		
	- podman run --name mysql -d registry.redhat.io/rhel8/mysql-80:1 ---- this will not start the mysql as it need env variblae(username , password , db name etc )
	- podman run --name mysql -e MYSQL_DATABASE=items -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_ROOT_PASSWORD=r00tpa55 -d registry.redhat.io/rhel8/mysql-80:1
	- podman ps -- to show the container created by the name of mysql
	- podman cp /home/student/DO180/labs/manage-lifecycle/db.sql mysql:/ --- to copy the esql file from hostmachine to container 
	- podman exec mysql /bin/bash -c 'mysql -uuser1 -pmypa55 items < /data.sql' ----- "-c" is verry imp if to run a bash command fro hostmachine to container 
	- podman exec mysql /bin/bash -c 'mysql -uuser1 -pmypa55 -e "select * from items.Projects;"'  ------ "-e" is very important to run any sql quesry from hostmachine to container.
	
5. Guided Exercise: Create MySQL Container with Persistent Database
you will create a container that stores the MySQL database data into a host directory.
- SELinux : Processes and files are labeled with an SELinux context that contains additional information, such as an SELinux user, role, type, and, optionally, a level.
	
	- mkdir -pv /home/student/local/mysql
	- sudo semanage fcontext -a -t container_file_t '/home/student/local/mysql(/.*)?' --- to create a policy for the folder(PV)
	- sudo restorecon -R /home/student/local/mysql                                   --- to apply the above policy to folder 
	- ls -ldZ /home/student/local/mysql --- just to check the SELinux policy applied
	- podman unshare chown 27:27 /home/student/local/mysql --to change UID for the folder to 27 as thisthe  mounted path for mysql so mysql user have UID of 27 same user honge tbhi access hogga
	- podman login registry.redhat.io
	- podman pull registry.redhat.io/rhel8/mysql-80:1
	- podman run --name persist-db -v /home/student/local/mysql:/var/lib/mysql/data -e MYSQL_DATABASE=items -e MYSQL_PASSWORD=mypa55 -e MYSQL_USER=user1 -e MYSQL_ROOT_PASSWORD=r00tpa55 -d  registry.redhat.io/rhel8/mysql-80:1
	- podman ps 
	- check the items folder created under /home/student/local/mysql folder 
	- podman ps -a >> /tmp/my-containers -- to save the stopped container file to a flie 
	Note :  The items directory stores data related to the items database that was created by this container. If the items directory does not exist, then the mount point was not defined correctly during container creation.		
		
			
6. Guided Exercise: Loading the Database
	In this case we will be running the db.sql using the port forwarding method.
	- podman login registry.redhat.io
	- podman run --name mysqldb-port -v /home/student/local/mysql:/var/lib/mysql/data -e MYSQL_DATABASE -e MYSQL_USER -e MYSQL_PASSWORD -e MYSQL_ROOT_PASSWORD -p 13306:3306 -d registry.redhat.io/rhel8/mysql-80:1
	- mysql -uuser1 -h 127.0.0.1 -pmypa55 -P13306 items < /home/student/DO180/labs/manage-networking/db.sql    --- "-h is important"
	- podman exec mysqldb-port /bin/bash -c 'mysql -uuser1 -pmypa55 -e "select * from Item;"'
			OR
	  mysql -uuser1 -h 127.0.0.1 -pmypa55 -P13306 items -e "Select * from Item;"
	
	- podman exec -it mysqldb-port /bin/bash 
		# mysql -uuser1 -pmypa55 items -e "Select * from Item"
		
7. 	Guided Exercise: Creating a Custom Apache Container Image
	We will be able to run a apache container and then create an image from it , then tag it , then push it to quay.io
	- podman run --name official-httpd -p 8180:80 quay.io/redhattraining/httpd-parent
	- podman ps 
	- podman exec -it official-httpd /bin/bash
		# echo "D0180 page" > /var/www/html/index.html
		# exit
	- curl localhost:8180
		== DO180 page 
	- podman stop official-httpd
	- podman commit -a "harmeet singh" official-httpd do180-custom-httpd
	- podman images 
	- podman tag do180-custom-httpd quay.io/harmeet_singh4/do180-custom-httpd:v1.0
	- podman images 
	- podman push quay.io/harmeet_singh4/do180-custom-httpd:v1.0
	- podman pull -q quay.io/harmeet_singh4/do180-custom-httpd:v1.0
	- podman run --name test-httpd -p 8280:80 -d quay/harmeet_singh4/do180-custom-httpd:v1.0
	- podman ps 
	- curl localhost:8280
		== DO180 page
	
8. Lab: Managing Images : Questions asking for commands
	- podman pull -q quay.io/redhattraining/nginx:1.17
	- podman images 
	- podman run --name official-nginx -p 8080:80 -d quay.io/redhattraining/nginx:1.17
	- podman ps
	- podman exec -it official-nginx /bin/bash
		# echo "DO180" > /usr/share/nginx/html/index.html
		# Exit
	- curl 0.0.0.0:8080 
	- podman stop official-nginx
	- podman commit -a 'Harmeet Singh' official-nginx do180/mynginx:v1.0-SNAPSHOT
	- podman images 
	- podman run --name  official-nginx-dev -p 8080:80 -d do180/mynginx:v1.0-SNAPSHOT
	- podman exec -it official-nginx-dev /bin/bash
		# echo "DO180 Page" > /usr/share/nginx/html/index.html
		# Exit
	- curl 0.0.0.0:8080 
	- podman stop official-nginx-dev
	- podman commit -a 'Harmeet Singh' official-nginx-dev do180/mynginx:v1.0
	- podman images 
	- podman rm official-nginx-dev
	- podman rmi do180/mynginx:v1.0-SNAPSHOT
	- podman images 
	- podman run --name my-nginx -p 8280:80 -d do180/mynginx:v1.0
	- curl 0.0.0.0:8280
	  == D0180 Page 
	
