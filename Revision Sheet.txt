ArrayList : list of values , inserts and add the value in same order.
		 index based insertion , in order to get the value or search the value need to traverse the entire list 

Hashmap : Key  value data structure . it is faster then arrayList 
			Based on hashing . a hashmap bucket is stored in heap memory to hold an array , Each arrau index contains a single linked list .
			A hash function is used to generate the index value using the key provided and push the value to that idex.
			hash function is used to get the value when we provide the key which gen the index value from where to get the value .
			
Hashset : Its not index based DS . It helps in removing the duplicacy .
				
Linked List : will work on non index based DS. Each elements contains a data and a pointer location to next element 
faster then ArrayList

TreeSet : its also non index based . Can remove duplcacy and sort the data in ascending order.

Hashtable : its similar to hashmap and are synchrounised .

Treemap  :  but sort the data in natural order. simiar to hashmap .

Linkedhashmap : similar to hashmap but maintains the order.

Linkedhashset  : this will remove duplicacy and similar to hashset but maintain the order.

Queue : FIFO

------ 
what is java 
jre 
jdk
jvm 
Objects creation 
heap memory 
object and  instance vari is in heap memory
local variable and methods are in stack memory 
Refeenec variable person p = new perons()
				 ----------
					ref var 
Access modifiers : 
public 
protected 
private 
default 
--------------
iterface  : used by implements keyword . consists only abstract function declarations . used when we know donstream contains diff function defination 
abstract class : used using extend keyword , consists of mixed functions (fun dec and func defination ) , when we know downstream contains diff and unique functionality 
--------
Keyword : final variable : value can not be changed 
			final class : can not extend it 
			 final mehthod : can be overloaded (means we can change the paramters , return type etc of the function name post extending it from the base class)
			 
		: static variable : unique value for all the objects or the instance of the class . we can use this variable by using the class name and dot operator 
           static inner class : this class can be instantiated without instantiating the upper class of it 
			 static method : this function can be called using the class name and dot operator. 
			   only static members calles the static class , variable and method .
			   
---------------
Collections : 
	arraylist : index based DS . need iterator to traverse through all elements . somewhat slower then other DS
	hashset  : not indx bases , remove the duplicacy . If added duplicate elements will be removed auto.
	hashmap  : key , value pair DS . based on hashing . In memory hash table that contains array . Each index in that array contains linked list . hashFN used to get the index value. Key can  be null 
	linkedList : combination of (value |address of next node -------> value|address of next node) faster then arraylist.
	treeset   : Non index based DS , remove the duplicacy and sort the elements in natural order (ascending order.) . 
	treemap   : Non index based DS , sort in natural order. Key value pair DS . Null key is not allowed.
	hashtable : key value pair and is thread safe means its synchrounised. only one thread at a time . Removed duplicacy . null key is not allowed.
	linkedhashset : similar to hashset , maintain the order of the elements entered
	linkedhashmap : similar to hashset , maintain the order of the elements entered
	vector : its a synchrounised and thread safe . Can not work in multithreaded env or setup . Somewhat slower and not usable in multi - threaded env.
	queuee : works on FIFO first in first out method .
Collections interface allow many functions to be used for collections 
		Collections.sort  --- ascending order
		collections.shuffle
		collections.min
		collections.max
		collections.sort(list,collections.reverserOrder) -- descending order 
		
--------------
Exceptions : 
		checked exp : which is the compile time excpetion and if occurs will not allow create the .class file .
		unchecked exp : which is the runtime exception and it doesn't occured while compile time. This occurs at runtime post .class is done 
--------------
Synchronised block : only one thread can execute the block and will lock it for the others threads to come .
synchrounised methods : only one thread can execute the method and will lock ot for the other threads to come.
volatile variable : this will make it thread safe and will allow oly thread to change the value of the variable 
--------------
Spring boot : 
			actuator : health check ui 
			circuit breaker : used in fault tolereance 
-------------- 
REST api : Represntation state transfer : is the methodology for best use of  http protocol 
methods : GEt , post , put , patch , delete etc and get is idenpotent means same response will come untill a change in data take place .
--------------
OAUTH2 : O Authorization : its the protocol used for secure access to the resource for a REST api .
Its depends on the client id and client secret. These two props are provided by the api auth server.

Its two way authentication using the grant token 

First request for access approval -------------------->
									<----------Approved --
									---sends request for grant token ----->
									<----receive grant token --------------
									Get logged in 
									
---------------
https://www.sanfoundry.com/mongodb-questions-answers-basics/
MongoDb : Its no sql bases data base depends upon the collections and documents .
collections are the tables and documents are the row. 	
Secondary indices are not available in MongoDB
writtern in C C++ javascript etc .
MongoDB has been adopted as backend software by a number of major websites and services.
Documents (objects) map nicely to programming language data types.
---------------				
Premitive and non premitive datatypes : 
	Premitive datatypes include : int , byte , char , long , double , short , float boolean etc 
	Non premitive data type are : String , Array etc 
	
--------------------
Wrapper classes : which is used for user defined data types : 
		We can use wrapper classses in collections classes to defined the data .
		ArrayLIst<Character> arr = new ArrayLIst<Character>();
		ArrayLIst<Integer> arr = new ArrayLIst<Integer>();
		ArrayLIst<Boolean> arr = new ArrayLIst<Boolean>();
		ArrayLIst<Person> arr = new ArrayLIst<Person>();
-----------------------
Stringbuffer and stringbuilder are immutable classes we can use these classes to append or concatenate the strings easily 
Stringbuffer str = new Stringbuffer("String to be test");
Stringbuilder str = new Stringbuilder("String to be test");
----------------------
constructor : 
	Whenever we create a constructor of a class compiler adds a Super() method at very first steps of the constructor.

public class ABS {
	
	private ABS (){
			super();
			
	}

}
		
Keywords : super() --- points to the base class constructor		
			super.  ----- this will give you list of methods and variable of the base class tobe used.
			this() --- this will call theconstructor of the same class 
			this. ---- this will show the methods and variables declared in same class 
-------------------------
Autoboxing : its the type cast used from premitive to non=premitive data types 
				example:   
				Integer i = new Integer(9999);
				Character i = new Integer(c);  or Character c = 'a';
				Float i = new Flat(9999.9900); or Float f = 999.90;
	Giving us the advantage of using all methods in Wrapper class Integer , character etc 

AUTOUNBOX : 
		Integer i = 100;
		int a = i;  -- this Auto unbox 
		
----------------------------
spring IOC container : this is the contex loaded which traverse through the classpath and through the entire project searches the class and load them as a bean into the memry which can then be injected automatically into other classes .
----------------------------
Java Patterns : 
			singleton :  keep the class instantiation to one objects . to do this keep the constructor private 
			prototype :  create duplicate objs .
			factory   : used if else condition to return downstream class objects which extends the abstracts class or interface 
			abstract factory  : Removes the if else block with a abstract class in which the if else is writtern to rturn the downstream classes objects 
			builder  : steps by steps to create complex objs
			adapter   : The class which act as a bridge to allow two unrelated interfaces to talk to each other 
			facade : hides the complexity by keeping the attributes private and allow access to the user.
			Dao : To keep the data base interacting layer separate .
			Dependecncy  : used to inject the objects and removed the dependency on other classes.
			mvc : For web based applications 
----------------------------
 OAUTH2 its the protocol which include below attributes as part of the complete webapi authentication.
 
 client app 
 Authorization server 
 resource server 
 resource owner 
-------------
- Spring boot is the fetaure ainly used to create bootable rest api and web applications .
It runs on top of the spring IOC containr or spring mvc which triggers the beancreater and traverse through the project and classpth to start creating the bean and adding it to the applicationContext .
- Rest Api : representational state transfer which shows the best use of HTTP protocol . Need the method (get , put , post , delete , patch etc ) and send via http protocol.
- Soap applicatin : which requres a WSDL , endpoint url , request and response structure and transport protocol for it . operation is use to invoke the Soap service.
- Dependecncy used for web api or rest api to be created 
	spring starter web 
	spring actuator : for api health check 
	spring boot devtools  : which is used to auto load the changes happened.
- Annotation :
	@RequestBody : which is used to map the incoming data to the bean created 
	@ResponseBOdy : whic is used to map the outgoing data using a bean 
	@component : which shows the spring mvc that this is the spring component and add it to the bean list in application context .
	@Valid : which is used to activat ethe validation of incoming data using a bean and this worked in combinatin with @RequestBody
	@JsonIgnore : whic his used for static filtering 
	@JsonIgnoreProperties : which is used for static filter and annotated at class level .
	@Entity : which is used to annotate a bean class as an entity and used with h2 db setup 
	@controller : which says the controller will recieve all the request .
	@Restcontroller : this will tell spring mvc that this controller will recieve all HTTP request using get , post , put and other method .
	@springboottest: this is used to annotate the class as a test class 
	@Test :  to write down a test in the spring boot test cass for unit tsting .
	@EnableConfigServer : which is used to annotate the main spring boot class to create a config server 
	@Enableopenfeign : which is used to create a proxy class or interface to call other service 
	EnableEurekaserver : which is used t enable the naming server 
	@Value  : which is used to load propertyfrom the applicatin.yml file . example : @value("${key.value}") . to get the value from the app.yml 
	@ConfigirationProperties(prefix="key.valuetobefetched") : it is also used to load the value from the app.yml file 
	@Service : which is used to create a spring boot service is also annotated as @Component 
	@Repository : which is used to create a Repository that interact with the Data base or in memory database.
	@RequestParams : which is used to get the value from the query paramater : http://localhost:8080/user/value?name=harmeet . @RequestBody String name
	@PathVariable : which is used to get the value coming in uri . http://localhost:8080/user/harmeet . and in mapping method uri =  http://localhost:8080/user/{} @PathVariable String name 
	@Requestmapping : which is used to annotate the method to receive the incoming http request. @Requestmapping(method="get", uri="/user/get")
	@GetMapping : which is used to annotate the meothod without telling the method just mention the uri 
	@PostMapping : which is used to annotate the meothod without telling the method just mention the uri 
	@PutMapping : which is used to annotate the meothod without telling the method just mention the uri 
	@PatchMapping : which is used to annotate the meothod without telling the method just mention the uri 
	@ResponseEntity : which is used to build the outgoing data and the httpresponsecode with it 
	@ResponseStatus :  which is used to mention the response HTTP status.
	
- Internationalization : which is used to create multipe response in different language for different locale .
- Versioning : which is used to create multiple versions of the api 
		Uri versioning 
		Header versioning
		Request Params versioning 
		MIME versioing 
- Jackson parsing : 
		whch is the default parser for the Response coming out of the rest api 
		we can change the parsing to  XML using : jackson-dataformat-xml
- HATEOS : Hypermedia at the engine of application state : which is used to send extra info back to the consumer .
			Dependency : spring boot starter - hateos 
- Actuator : 
		for health check 
		spring boot starter - actuatro 
		localhost:8088/actuator
	We can also use the hel browser 
- Validation : for validation to activat using the bean 
		Spring boot starter validation 
		Annotate the bean class attribute with @Size , @Mmin , @Max and @Email
- Swagger : used dep spring -openapi -doc 		
		uri : localhost:8080/swagger-ui/index.html : to see the UI of the api 
		uri : localhost:8080/v3/api-doc : to see the swagger json file of the api 
- Static filtering : which is done by using JsonIgnore and JsonIgnoreProperties
- Dynamic filtering : which is used to create a custom filter using MappingjacksonValue class create the filter and return the map 
- Authentication : which is used to add the security to the Rest Api : 
		Dependecncy : spring-boot-starter-security 
		This will add the security layer to the rst api.
		In logs we can get the password and defautl username is user 
- JPA  : Java persistence API : which act as a bridge between the java objects and the DATABSES . This  api or interface helps in wrapping up the java objects and push the objects to the DATABSE,
Dependecncy : spring boot startetr data - jpa : this is the api or interface 
dependency : spring boot starter  - h2  : h2 is the in memory database  : http://localhost:8080//h2-console

- Spring cloud config : which provide the feature to connect to the remote repository of code  that holds the configs.
   Need to things 
		- Spring cloud server : spring boot netflix -<artifactId>spring-cloud-config-server</artifactId> in microservice 
			app.yml 
			spring.application.name="spring-config-server"
			server.port=8088
			spring.cloud.config.server.git.uri=""
			spring.cloud.config.server.git.username=""
			spring.cloud.config.server.git.password=""
			spring.cloud.config.server.git.force-pull="true"
			
		- rest api  which will join the spring config server : <artifactId>spring-cloud-starter-config</artifactId> in microservice 
			spring.application.name=app1
			server.port=8081
			spring.config.import=opetiona:configserver:http://localhost:8088
- RestTemplate() : which is used to call other api from one api 
- openfeign : which is used to create a proxy and call the api from one api better then RestTemplate()
	feign also does the loadBalancer ans switch od incoming request the api
- Naming server : used to register the apis to resolve the DNS names	

	Similar like config servers :  annotate the main class with @EnableEurekaserver
	create a naming server api : <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
	create a rest api  : <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
- Resilience4j : i is used to circuit breaker and failover condition to recover from .
		dep : 
			springbootstart.aop
			<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
			
	resilience4j.ratelimiter
	resilience4j.retry
	resilience4j.bulkhead

rateliiter : it is used  in case of app us dwn and need to stop the request rate to some extends 
retry :create a controler and use resttemplate hitting a dummy uri and annotate the method with @Retry(name="springap",fallbackmethod="runthismethod")
	
		
		
		

			