HELM : -----------------------------------
https://helm.sh/docs/intro/install/
command to install : 1. install Chocolatey 
					 2. choco install kuberenetes-helm
					 
 1. As we know that there are many package manager for example : 
 apt  :  centos 
 yum  :  for RHEL linux 
 npm  :  is for nodejs 

 2. Each of the above package manager when used like apt-get httpd install/upgrade/uninstall , it will pull the liberaries/package(httpd) to create a service .
 3. When ever we want to create kuberenetes resources we have to create the static yaml files with static values. We can not pass anything at deployment time, which is overcome by helm.
 
HELM :

1. JUST like above package manager HELM is a such package manager used to download the package using the charts . Charts contains the package values to be downloaded to create the Kuberenetes resources (like deplpyment , sevrice , route, build , configmap etc)

	Example command : 
	helm install apache bitnami/apache -namespace=web   - will create the dep,build,service,route etc on kuberenetes cluster
	helm upgrade apache bitnami/apache -namespace=web   - will upgrad the dep,build,service,route etc on kuberenetes cluster
	helm rollback apache 1 -namespace=web               - will Rollback to old version of apache
	helm uninstall apache 								- will ununstall the dep,build,service,route etc on kuberenetes cluster
	
	Above comand bitnami/apache is the repository where the charts(yamls) lies. and will install apache by pulling the charts.
2. 	HELM maintain the revision history for the resources created and help us in rollback the deployment .
3.  HELM made it simple for the resources to be created on kuberenetes by pulling the charts from the repo and do the rest .
4.  HELM will also allow to receive the dynamic values at deployment time from different files to replace the values in chart.yaml so that we can make the deploymentfor an app server independent	

	it worked like this 
		.below files which were static before will have some placeholder for the values now to receive dynamic values from values.yaml.
			deployment.yaml
			service.yaml
			route.yaml
			configmap.yaml
		.Then HELM will use values.yaml which will be passing the valus to the placeholders in the above resources files.	
		
		
						push values to				deployment.yaml
		values.yaml ------------------------------>	service.yaml    --------------------------------------> Kuberenetes resources created.
													route.yaml
													configmap.yaml
5. Its provides security 													

6. Whenever we create a new release-installation the entire infomration is stored in the secrets created by the kuberenetes.
7. when we uninstall the release-installation then the entire info in the secrets will be rmoved.
7. We can not create a new release-installation with the name by which a release-installation has been existing in the same namespace .
8.  We can create a new release-installation with the same name by which a release-installation has been existing in the different namespace.
9.  What background steps takes place when we run helm install command :
	- Pull the charts and its dependencies 
	- parse the values.yaml file 
	- Generate the actual yaml from the template folder by using values.yaml file after replacing the values.
	- Generate the kube objects or resources using the yaml file and validate against the kuberenetes schema.
	- Generate the yaml and deplpoy it to the kuberenetes clusters api.
	
	
10. output of an install command: 
-----------------------Working session on my system ----------------
C:\oc>helm install mydb bitnami/mysql
NAME: mydb
LAST DEPLOYED: Wed Nov 16 13:19:06 2022
NAMESPACE: harmeet-singh4-dev
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
CHART NAME: mysql
CHART VERSION: 9.4.3
APP VERSION: 8.0.31

** Please be patient while the chart is being deployed **

Tip:

  Watch the deployment status using the command: kubectl get pods -w --namespace harmeet-singh4-dev

Services:

  echo Primary: mydb-mysql.harmeet-singh4-dev.svc.cluster.local:3306

Execute the following to get the administrator credentials:

  echo Username: root
  echo MYSQL_ROOT_PASSWORD=$(kubectl get secret --namespace harmeet-singh4-dev mydb-mysql -o jsonpath="{.data.mysql-root-password}" | base64 -d)

To connect to your database:

  1. Run a pod that you can use as a client:

       kubectl run mydb-harmeet-mysql-client --rm --tty -i --restart='Never' --image  docker.io/bitnami/mysql:8.0.31-debian-11-r10 --namespace harmeet-singh4-dev --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash
	  or 
	  
	   oc run mydb-harmeet-mysql-client --rm --tty -i --image  docker.io/bitnami/mysql:8.0.31-debian-11-r10 --namespace harmeet-singh4-dev --env MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD --command -- bash
	   
	  
  2. To connect to primary service (read/write):

      mysql -h mydb-mysql.harmeet-singh4-dev.svc.cluster.local -uroot -p"$MYSQL_ROOT_PASSWORD"`	
-----------------------Working session on my system ----------------	  