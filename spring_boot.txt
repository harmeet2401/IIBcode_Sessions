Spring boot -------springboottutorial.com

lab 1 : ------------ Web app using spring boot framework -------------
Creating using below dependencies

1. Web 
2. Thymleaf : 
	A modern server-side Java template engine for both web and standalone environments. Allows HTML to be correctly displayed in browsers and as static prototypes.

. Its a greate framework that provide embedded process with the Tomcat or Jetty 
. no code generation at all
. its neither an  integration/application server nor a was server 
. when we use thymleaf , it is specifically used to utilize the thymleaf templace to view html page easily on browser.
. Once controller is done , add the sample html file in template folder .
. Model class provide the view which helps in binding the value to the html page .
. Model allow the users to add the attributes in map fashion. key and value


lab 1 : ------------ Web app using spring boot framework -------------


----------------------------------------------------------------------------------
Spring boot main class : 

. @SpringBootApplication 
It tell its the spring context to be load
It also enables the autoconfiguration annotation that will start configuring the beans or jar present on the classpath .
It will enable the Autoconfiguration and ComponentScanner

1. ComponentScanner : Will scan all folders of the project to start registering the classes as a component 
		And the annotation will provide the registeration .
			example : @Controller , @RestController , @Component , @Service , @Repository , @EnableConfigServer ,@Entity etc 
2.	Autoconfiguration : it will look over the class path and start creating beans on the basis of it .
	We can turn on the debug level logs using 
	
		logging.level.org.springframework = DEBUG
		
----------------------------------------------------------------------------------


----------------------------------------------------------------------------------
. @Controller 
a controller is  a class whose job is to receive HTTP request.

. @RestController : 
a controller class which in turn is annotated as @controller and @ResponseBOdy if we check the documentation of @RestController.
The @ResponseBOdy will tell the class to convert it to json object and sends it back to tthe usrs.

. @Component 
spring boot will scan all the beans or classes which are annotated as @Components or either other annotations like @Services , @Repository which in turn when you go inside it are annotated as @Component 
 
There are two types of testing techniques in Spring boot 
1. Junit test 
2. Spring MVC mock test : which is basically for spring boot controller testing if its working fine or not .


. ApplicationContext : is the set of beans spring instantiated while componentscan of all the classes on the class path .
  We can use 
  
  @Autowired
  ApplicationContext cf;
  
  
  cf.getbean("nameofthebean",typeofthebean(string , int , Bigdecimal , numberformat etc))
  
  
 forexample : 

1.
	@springbootapplication
	public class springstart(){
	
			psvm(){
			
			
			}
			
			@Bean
			public NUmberFormat defaultCurrencyBean(){
			return NUmberFormat.getCurrency();
			}
			
			@Bean
			public NUmberFormat geremanyCurrencyBean(){
			
			return numberformat.getCurrency(locale.GEremany)
			}
	
	}
  
  
  
 2.  In test class  :
 
 @RunsWith(SpringRunner.class)
 @@Sprigboottester
 public class testrun(){
 
 @Autorired @Qualifier("defaultCurrencyBean")  ------------------> this we have to mention as two beans with same types were declared which makes a compile issue 
 ApplicationContext stx;
 
 @test
 public void defaulcurr(){
 
 stx.getNumberFormat();
 
 }
 
 
 
 }
 
 
So in nutshell we can either get the bean by autowire it or by using getbean function of ApplicationContext.


. RestTemplate  : its the class we can use to call other Api or services 


1. @Service
	public class JokesService{
	
		public RestTemplate resstTempplate;
		
		@Autorired
		public JokesService(RestTemplateBuilder builder) 
		{
			resstTempplate = builder.build(); ---------------------------- just to instantiate the resstTempplate object RestTemplateBuilder will get autowired
		
		}
		
		public String getJokes(String name)
		{
			String url = String.format(base , %s );
			ResponseEntity foren = resstTempplate.getForObject(url , Joke.class);
			foren.getJokename();
		
		}

	}
	
2.  Bean or a POJO for the Jokes 
	
	public class Joke{
	String ID
	String name
	String jokename
	
	//getter setter 
	
	}

3. Unit test clas 

	@SprigbootTest
	@ExtendWith(SpringExtention.class)
	public class demoJokeUnitRunner{
	
		@Autowored
		JokesService JokesService
		
		@Test
		public void getjoke(){
		String jokename = JokesService.getJokes("craig");
		assertTrue(jokename.contains("craig"));
		
		}
	
	
	}
  
NOte  : always check the documentation of the annotation to see the parent annotation for better understandings.
. 
----------------------------------------------------------------------------------
		
		

Evolution from spring --------------> spring mvc -------------------> spring boot 

each tech is solving it own prob :
spring : it removes the issue of dependencies injection 
spring mvc : it provides better connection with embedded system 
sprig boot : it helps by using sping and spring mvc under it and allow auto configure to auto create all beans required for creating dispatcher servelet , injecting dependencies and giving an embedded web server to deploy a web service 		


starter dependencies : docs.spring.io

spring-boot-starter-web-service : Soap web services 
spring-boot-starter-web : Res web services 
spring-boot-starter-test : unit test cases 
spring-boot-starter-jdbc : traditional JDBC connection to DB
spring-boot-starter-hateaos : Add hateaos feature to it .
spring-boot-starter-security : this will add Basic auth to ur project and you can set the usrname and pass in app.yml file.
spring-boot-starter-data-jpa : The interface between the java object entity to the Db connection mostlty H2
spring-boot-starter-cache : enables spring framework cache's feature
spring-boot-starter-data-rest : expose simple rest services using spring data Rest
spring-boot-starter-actuater : advance features like monitoring , tracing etc 
spring-boot-starter-logging : for logging using logback 
spring-boot-starter-log4j2 : logging using log4j2

Spring boot actuater : 
	its a verry good feeature which will help in creating testing url s, health probes etc .
	it will give you separate ui to test your rest api or soap api .
	urls , how many times service is called . metadata 
	
	management.endpoints.web.exposure.include=*
	
Hal browser : 
		will give info like swgger UI 
		
Spring boot developer Tools : devtools dep to auto load the change 

Spring boot JPA : javax persistence api  : javax.persistence.* which contains all the annotation

JPA is connected to the H2 hibernate in memory database .
jpa is like the interface which contains the classes as an interface and hibernate is the implementation of JPA interface .
H2 will be able to understand once you create the entity bean and allow to create columns or table in H2 db easily.

HIBERNATE is one of the popular ORM framework .

Jpa defines the specification . its an api . So below are the ways JPA tells ok these are the way you define the : 

	how do you define entity ?
	how do you map attributes to the column of the h2 db?
	how to manage the entity.?

Make the database URL a constant by configuring this in application.properties.

spring.datasource.url=jdbc:h2:mem:testdb
spring.data.jpa.repositories.bootstrap-mode=default	

Project : JPA : --------------- 
steps : 
1. create a simple bean user 
User : annotation as @Entity 
	id annotation as @id @Generated
	name
	address
2. Create a UserDaoService to manage the entity to insert data 
		annotation as @Repository and @Transactional for each methodto be transactional
    user EntityManager entityManager class which is annotation as @PersistenceContext 
	and ad a function 
		public long insert (User user){
		entityManager.persist(user);
		return user.getId();
		
		}
3. create a command line runner class instead of a controller tat we did for an rest api 
		command line runner will run once the spring boot project starts .
		
	class : UserDaoCommandLineRunner annotation as @Component implements CommanLineRunner interface 
	@Autowired : UserDaoService userdaoservices
	method : ovveride : run (String .... arg0 ){
	User user = userdaoservices.insert(new user(jack , 9889))
	}
			
		
		

Questions : 
where is the Db created  ?
h2 in mem db 

what schema is used to create the table ?
created based on the user bean entityt.

where we can see the h2 database ?
localhost:8080/h2-console

where is h2 is coming fro m ?
as h2 is the implementation of JPA . it is handling that .



Spring data jpa is the feature which allow you to create a repository and mention your method and spring jpa will provide you the implementationfor it 
and also configure the entity for it.
	In which we create an interface and extend JPArepository<primary key , data type for it >


Q : What sre JSON annotation in springs 
		@JsonIgnore : --------- to ignore the mapping of the variable in bean 
		@JsonProperty : ------- to assign the name of the variable when it comes out as json 
		jacksonparserconfiguration jar file on classpath tells to serialize and deserialize the java objects 

Repository

Spring Data Commons

Provides the core abstraction for Spring Data repositories

----
CrudRepository

Spring Data Commons

Extends Repository and adds utility for basic CRUD operations

---
PagingAndSortingRepository

Spring Data Commons

Extends CrudRepository and adds utility for paging and sorting records

---
JpaRepository

Spring Data JPA

Extends PagingAndSortingRepository and adds utility for JPA and RDBMS database models

---
MongoRepository

Spring Data MongoDB

Extends PagingAndSortingRepository and adds utility for managing MongoDB documents

---
CouchbaseRepository

Spring Data Couchbase

Extends CrudRepository and adds utility for managing Couchbase documents		
-----------------------------------------------------------------------------------------------------------

1.Java EE 8 Microservices
Build microservices-based enterprise applications with the latest version of Java EE
Key Features
Create microservices in Spring and deploy them with Docker and Mesos
Examine a number of real-world use cases and hands-on code examples
Develop distributed applications based on microservices architecture 
https://yourlearning.ibm.com/activity/SAFARI-9781788475143 -------------- complete
13 Hours 50 Min

2. https://learning.oreilly.com/library/view/mastering-microservices-with/9781789530728/?sso_link=yes&sso_link_from=IBM-Prod

3.	Spring and Spring Boot Fundamentals	Fundamental details of  Spring are and Spring Boots	https://learning.oreilly.com/learning-paths/learning-path-spring/9781492055334/	7 Hours 20 Min	


-----------------------------------------------------------------------------------------------------------

