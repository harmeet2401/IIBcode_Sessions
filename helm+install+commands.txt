helm repo list
helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo list
helm repo remove bitnami
helm repo add bitnami https://charts.bitnami.com/bitnami

Search the repository:
helm search repo mysql
helm search repo database
helm search repo database --versions

Install a package:

kubectl get pods
(Below Two commands - In a Different Shell/Commandline window/tab)
minikube ssh
docker images
helm install mydb bitnami/mysql
helm install mydb-1 bitnami/mysql

Check the cluster:
kubectl get pods
minikube ssh
docker images

To check the installation status:
helm status mydb
--------------------------------------------

To Upgrade:

ROOT_PASSWORD=$(kubectl get secret --namespace default mydb-mysql -o jsonpath="{.data.mysql-root-password}" | base64 --decode)

helm upgrade --namespace default mysql-release bitnami/mysql --set auth.rootPassword=$ROOT_PASSWORD

-------
helm list  ------------- to list the helm 
helm list --namespace teamtwo - to list the helms in different namespace
helm uninstall mysql-release
helm uninstall --namespace teamtwo mysql-release

----- Use of the values.yaml file to send the values to the chart for example in this case rootpassword .

values.yaml 

----------------------------------------------mysql----------------------------------------

.helm install mydb-test bitnami/mysql --values values.yaml   -----> this will use the value presents in values.yaml file to override it in chart bitnami/mysql
.helm install mydb-test bitnami/mysql --set root.rootPassword=test1234 ----> here we are passing the values in command.
.helm repo update	------------------------ this will fetch any updates presents on the chart repo 
.helm upgrade --namespace default mydb-test bitnami/mysql --set auth.passwor='test1234' . --------- after getting the update from the chart repo we need to upgrade the helm deployment 
and it always need to send the root password to the upgrade command.
.helm upgrade mydb-test bitnami/mysql --values values.yaml ----- we can upgrade using the values.yaml file.
.helm status mydb ------------------- to see the status of the deployed resources.
----------------------------------------------mysql----------------------------------------

----------------------------------------------tomcat-----------------------------------------

.helm install tomcat-release bitnami/tomcat --values values.yaml   -----> this will use the value presents in values.yaml file to override it in chart bitnami/mysql
.helm install tomcat-release bitnami/tomcat --set root.rootPassword=test1234 ----> here we are passing the values in command.
.helm repo update	------------------------ this will fetch any updates presents on the chart repo 
.helm upgrade --namespace default tomcat-release bitnami/tomcat --set auth.passwor='test1234' . --------- after getting the update from the chart repo we need to upgrade the helm deployment 
and it always need to send the root password to the upgrade command.
.helm upgrade tomcat-release bitnami/tomcat --values values.yaml ----- we can upgrade using the values.yaml file.
.helm status tomcat-release ------------------- to see the status of the deployed resources.
----------------------------------------------tomcat-----------------------------------------
.helm install mysql-db bitnami/mysql --values values.yaml --dry-run ----------------------------------- this will do all the steps till creating the kube objects and valaidating it with the
																										kubernetes schema and will no deploy it to the kubernetes
																										It is used to debug the values and validate the templates rendered .
																										it will give you the template with the real values replaced.

.helm template mysql-db bitnami/mysql --values values.yaml --------------------------------------------- this command will also give us the template with replaced 	values but will not go for the 
																										  validation of the templates created against the kubernetes cluster API. So need of active 
																										  k8 cluster.
																										  


Note : 
1. when we get an update if there is a small change in the chart then helm while upgrading will create kubernetes template and compare it with the old template deployed and send only the 
changes which are needed saving ample amount of time.
2.  if you use --values while installing the charts to the cluster then while upgrading the chart you need to pass again the --values and values.yaml file or else it will use the default configuration
values. You can also pass --reuse-values flag to use the existing values.yaml 



