AWS root user : 
meet1992jan@gmail.com
Gogi@12345
Access key  : AKIASJIKHFY3WWOWHXE2

Use this repo for code to create resources : 
https://github.com/stacksimplify/hashicorp-certified-terraform-associate/tree/main/02-Terraform-Basics

https://github.com/stacksimplify/terraform-on-aws-ec2/tree/main/02-Terraform-Basics

It is used to install or create infra on AWS or any other cloud provider .
Instll Terraform cli 
Install Aws cli : aws configur eto configure the aws account to want to work on and its resources.
Once aws cli is install . You can go to your account -- > IAM -- > users --- > Top right corner select admin accont --> secret access keys and then generate and use it 

Command aws configure  : 
    - > access key id 
    - > secert access key 
      els e

1. Terraform workflow and command : 
    a. Terraform init : initial the directory where wrote the terraform scripts and downloaf the providers and liberaries needed.
    b. Terraform validate  : Validate the syntax of the terraform script we wrote 
    c. Terraform Plan : Which will tell you what is about to be created/update/destroy and how.
    d. Terraform apply : which will create the resources to the aws cloud  .
    e. Terraform destroy : which will destroy the resource on aws cloud.
2. Terraform code files are terraform configuration files.
Note : We should be running the above commands in the working directory where the tf files rae thre.

3. tf anatomy : 

        <Block Type> <Block label1 >  <Block label2> {
                Argument identifier = Arguments values.

            }

Example : resource is the block type and so on as other values.
        resource "aws_instance" "ec2demo" {
                    AMI = "ami-uuwjjjjss"
                    PROCESSOR = "AMDreon"
                }

        - Blocks  : like resources , variable , data etc 
        - Provisioners blocks : Like tags etc 
        - Block labels : which is like resources "aws_instance" "ec2demo"  ----> two lables are there.
        - Arguments : Which is inside the blocks.
                    like AMI , Processor ,etc
    
4. To run the teaaform script below steps is pre-requisite : 
        - Default vpc should be there 
        - AMI for the EC2 you want to create shold be in the region avaialbe 
        - Verify your creds you configure for aws login in $HOME/.aws/configure  : C:\Users\harmeet.y.singh\.aws\credentials.

5.  Arguments , meta arguments and Attributes  and labels 
    - Labels  :     
        The second labels can be anything . The first label should ne hashicorps standard based. like aws_instance is a valid one and aws_instance_demo is not a valid one .
    - Arguments :         
        These are used to configure the resources and are eith required or optional .
        Always look for the documentation to check for the rquired and optional fields.
    - Attributes : 
        Attributes really points to the configuration assigned by the underlying provider to the resource we create using the arguments .
        These attributes can also be used in other resources in case we need it in format : resource_type.resource_name.attribute_name.
        For example for above ec2 
                aws_instance.ec2demo.publicip : This is the attribute we can use after creattion of ec2 instances.
    
    - Meta-arguments : As above arguments and attribute are aws resource level things. Meta-arguments is used for terraform purpose to control the code behaviour .
        example : depends-on is a meta-arguments which controls the behavioud that one resource depends upon the other.
                For-each : which is a code level loop .

6. Blocks in TF : 
        1. Fundamental blocks: 
                - Terraform block : In which we mention the hashicoop version and plugin needed.
                        Only constants value to be used inside it liek version number , etc 
                - Providers block : to tell which cloud provider and region and etc 
                        same only constants to be used like provider name : aws , region etc 
            NOte : Above two blocks can be part of single file name it as terraform.tf or any name 
            NOte : Terraform.tf file we can also mention the terraform state file store location. Like we did in using the bucket on cloud provider.
                    Agar ye backend nhi doge to vo local directory mai bnadegga state file.
                    name of the file : terraform.tfstate

                - Resource blocks : To create a specific resoutce.
            Note : resource block should be part of different file as per the codeing standards.

        2. Variable blocks : 
                - Input variable blocks : TO create a vraibles 
                - output values blocks : to create an output variable to be used further 
                - local values blocks: with in the same modules or tf file.
        3. Refernece blocks :
                - data blocks : which is used to get referenced values form the provider for a specific resource.
                - Module blocks : which is used to call an existing resources or bundle from providers and use it. It is used to pull the resources from the terraform registery just like we pull an image from the docker registry.

7. terraform block and providers blocks : 
    - terraform block will contains the terraform version and the required_providers which is used to communicate with the providers and root modules .
    - TERRAFORM REGISTRY is there just like the git repo which contains the providers and the modules we can download to work .
             : Providers on hashicoprt/terraform registry we can download.
                hashicorp/aws : Lifecycle management of AWS resources, including EC2, Lambda, EKS, ECS, VPC, S3, RDS, DynamoDB, and more. This provider is maintained                     internally by the HashiCorp AWS Provider team.

     - c1-versions.tf mai terraform block and provider bloack likhne ke baad jab hm isse jaake provider ko us-east-1 mai kaam krne ke liye authentication chahiye jo ham         static way mai de skte hai in provider bloack like arguments "access_key" and "secret_key" jo shi way nhi hai .

        correct way ke liye do "aws configure" and enter the region , accesskey and secretkey from your aws console managment. 
        after which the in .aws/credentials have the profile , accesskey and secretkey 

8. resource block :
        - Need resource keyword
        - block label1  : which is the resource type like aws_vpc , aws_instance , aws_s3 , aws_iam_policy etc 
        - block label2 : which should be unique like a variable in java to be used anywhwre in the module scope.
        - Inside block : we have arguments , meta-arguments etc
                Argument reference or arguments are input to the resource . like ami , tags , type etc 
                Attribute references or attributes are the properties jo output niklta hai resource bnne ke baad . We can use these attributes as an output and use it a                   ny where using resourcetype.resource_name.attributename . arn tagsall , private_dns  , instance_state. etc 

    Some imp commands : 
            terraform init
            terraform plan 
            terraform apply -auto-approve
            terraform plan -destroy  : to check  the plan for destroy 
            terraform destroy 
        - terraform.tfstate : it contains the provider and resources create with version . really important file. For now ye file local mai bnti hai . Pr hm isse remove             aws cloud mai store kr skte hai . This file create a biding file for the resources between local tf files and rrmote cloud. help in updating .
            Desired state is the tf files we have and current state if the resource which are available in cloud aws,
        
9. Data Source  : Which is used to get the attribute references for the resource already there in aws cloud . and used that in terraform . This actually shoes the values which is out of terraform like in aws cloud. 
10. Output values : Output values are the return values from the terraform modules and have several uses. Jo modules
Which we can used for multiple ways : 
                        1. To print the values in the console ,console after we ran the terraform apply. output values tf mai daalne ke baad vo console output pr dikhte                         hai jab koi resource bn jata hai aws cloud pr.
                        2. We can also generate data or variable like List , map or legacy splat(kind of list ) and latest splat(List ). Means output jab hm likhte hai                         aws resources job bnega uski newly bnni props ko use krke new values bna skate hai and use kr skte hai khi bhi inside the project .
                            Example dekho
                                            for_loop_advanced_map = {
                                              "0" = "174.129.75.9"
                                              "1" = "3.87.175.8"
                                            }
                                            for_loop_list = [
                                              "174.129.75.9",
                                              "3.87.175.8",
                                            ]
                                            for_loop_map = {
                                              "i-05c95e06819a3f935" = "3.87.175.8"
                                              "i-0be9bf6d28a6a7551" = "174.129.75.9"
                                            }
                                            latest_splat = [
                                              "174.129.75.9",
                                              "3.87.175.8",
                                            ]
                                            legacy_splat = [
                                              "174.129.75.9",
                                              "3.87.175.8",
                                            ]


11. variables in tf : 
        three types :     
                input variables   : Which we can write as variable and use it like var.etc
                output values 
                local values 
12. Pem key assigned to the ec2 instance can also be used to login to ec2 linux : ssh -i abc.pem ec2-user@ipaddressofec2instance

13. Terraform loop , list and loop with map and legacy splat.

NOTE : WHENEVER YOU WANT TO CHECK WHICH ARGUMENT TO REFER TO CREATE A RESOURCE : YOU CAN CNTRL + SPACE TO GET THE ARGUMENT MAKE SURE HASHICOPR TERRAFORM PLUG IN SHOULD BE THERE IN VS STUDIO

14. For_ezch Meta-argument function : 
        - For_each function will loop through the values which should be eirther set of Strings and map objects.
    We can take a lab for example : 
                Q. We need to create 2 instances of Ec2 one in diff aZ and other in another az . ?
                Ans : 1. For that first create a data source to get the availability zones present in your region . Which will be a list of values.
                      2. Second we can assign those list of Azs to for_each function as a set to be loop through .
                      3. Then assign each.key to the availability_zones argument of the ec2 instance resource terrafrom.
15. toSet , toMap function : which can be used to convert the data to set and map data structure .
16. Create a utility project to be used in the project 
    Subnets are the availability zone in an AWS availability region's vPC . 
    Problem Q : How to check which az support my type of ec2 instance . like t3.micro pr t2.micro ?
    Ans : # Determine which Availability Zones support your instance type
aws ec2 describe-instance-type-offerings --location-type availability-zone  --filters Name=instance-type,Values=t3.micro --region us-east-1 --output table

    Now upr commands se hme pta lgaa ki kis region mai t3.micro instance type offerings hai . So usko ham using data source in terraform mai offering nikaal skte hai .Easy . That data source will give you list of azs which have that particular offering of instance type jo ham data source ke arguments mai denge.
output will give you the values at the time of plan with + sign and can be shown without + when applied.

Using Terraform : 
        data source : aws_ec2_instance_type_offerings
                

17. Local variable , generic variables and terraform.tfvars .
    - Local variables : The local variables are used when we need to replace a complex expression with a variable. means hm iski help se complex expression ko variable se replace krke use kr skte hai .
    Example  
            locals {
                  owners = var.business_divsion    --------------- isme ye value variables se lerri hai 
                  environment = var.environment --------------- isme ye value variables se lerri hai 
                  name = "${var.business_divsion}-${var.environment}" --------------- isme ye value variables se lerri hai 
                  #name = "${local.owners}-${local.environment}"
                  common_tags = {
                    owners = local.owners --------------- isme ye value local jo upr set kiya hai usse lerri hai 
                    environment = local.environment--------------- isme ye value local jo upr set kiya hai usse lerri hai 
                  }

                instance_ids = concat(aws_instance.blue.*.id, aws_instance.green.*.id)  ----- isme dekho hmne concat use krke ek instanxe_ids krke local variable bnaya hai usko hm khin bhi use kr skte hai 

                } 
    - Generic variables : Which we declared in .tf file with type , description and default value mentioned 
            example : 
                   variable "aws_region" {
                      description = "Region in which AWS Resources to be created"
                      type = string
                      default = "us-east-1"  
                    }
    - terraform.tfvars : So this file can be used to override/assign the values to the variables mentioned in he generic variables. like 
                aws_region = "eu-west-1"

        
