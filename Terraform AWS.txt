AWS root user : 
meet1992jan@gmail.com
Gogi@12345
Access key  : AKIASJIKHFY3WWOWHXE2

Use this repo for code to create resources : 
https://github.com/stacksimplify/hashicorp-certified-terraform-associate/tree/main/02-Terraform-Basics

https://github.com/stacksimplify/terraform-on-aws-ec2/tree/main/02-Terraform-Basics

It is used to install or create infra on AWS or any other cloud provider .
Instll Terraform cli 
Install Aws cli : aws configur eto configure the aws account to want to work on and its resources.
Once aws cli is install . You can go to your account -- > IAM -- > users --- > Top right corner select admin accont --> secret access keys and then generate and use it 

Command aws configure  : 
    - > access key id 
    - > secert access key 
      els e

1. Terraform workflow and command : 
    a. Terraform init : initial the directory where wrote the terraform scripts and downloaf the providers and liberaries needed.
    b. Terraform validate  : Validate the syntax of the terraform script we wrote 
    c. Terraform Plan : Which will tell you what is about to be created/update/destroy and how.
    d. Terraform apply : which will create the resources to the aws cloud  .
    e. Terraform destroy : which will destroy the resource on aws cloud.
2. Terraform code files are terraform configuration files.
Note : We should be running the above commands in the working directory where the tf files rae thre.

3. tf anatomy : 

        <Block Type> <Block label1 >  <Block label2> {
                Argument identifier = Arguments values.

            }

Example : resource is the block type and so on as other values.
        resource "aws_instance" "ec2demo" {
                    AMI = "ami-uuwjjjjss"
                    PROCESSOR = "AMDreon"
                }

        - Blocks  : like resources , variable , data etc 
        - Provisioners blocks : Like tags etc 
        - Block labels : which is like resources "aws_instance" "ec2demo"  ----> two lables are there.
        - Arguments : Which is inside the blocks.
                    like AMI , Processor ,etc
    
4. To run the teaaform script below steps is pre-requisite : 
        - Default vpc should be there 
        - AMI for the EC2 you want to create shold be in the region avaialbe 
        - Verify your creds you configure for aws login in $HOME/.aws/configure  : C:\Users\harmeet.y.singh\.aws\credentials.

5.  Arguments , meta arguments and Attributes  and labels 
    - Labels  :     
        The second labels can be anything . The first label should ne hashicorps standard based. like aws_instance is a valid one and aws_instance_demo is not a valid one .
    - Arguments :         
        These are used to configure the resources and are eith required or optional .
        Always look for the documentation to check for the rquired and optional fields.
    - Attributes : 
        Attributes really points to the configuration assigned by the underlying provider to the resource we create using the arguments .
        These attributes can also be used in other resources in case we need it in format : resource_type.resource_name.attribute_name.
        For example for above ec2 
                aws_instance.ec2demo.publicip : This is the attribute we can use after creattion of ec2 instances.
    
    - Meta-arguments : As above arguments and attribute are aws resource level things. Meta-arguments is used for terraform purpose to control the code behaviour .
        example : depends-on is a meta-arguments which controls the behavioud that one resource depends upon the other.
                For-each : which is a code level loop .

6. Blocks in TF : 
        1. Fundamental blocks: 
                - Terraform block : In which we mention the hashicoop version and plugin needed.
                        Only constants value to be used inside it liek version number , etc 
                - Providers block : to tell which cloud provider and region and etc 
                        same only constants to be used like provider name : aws , region etc 
            NOte : Above two blocks can be part of single file name it as terraform.tf or any name 
            NOte : Terraform.tf file we can also mention the terraform state file store location. Like we did in using the bucket on cloud provider.
                    Agar ye backend nhi doge to vo local directory mai bnadegga state file.
                    name of the file : terraform.tfstate

                - Resource blocks : To create a specific resoutce.
            Note : resource block should be part of different file as per the codeing standards.

        2. Variable blocks : 
                - Input variable blocks : TO create a vraibles 
                - output values blocks : to create an output variable to be used further 
                - local values blocks: with in the same modules or tf file.
        3. Refernece blocks :
                - data blocks : which is used to get referenced values form the provider for a specific resource.
                - Module blocks : which is used to call an existing resources or bundle from providers and use it. It is used to pull the resources from the terraform registery just like we pull an image from the docker registry.

7. terraform block and providers blocks : 
    - terraform block will contains the terraform version and the required_providers which is used to communicate with the providers and root modules .
    - TERRAFORM REGISTRY is there just like the git repo which contains the providers and the modules we can download to work .
             : Providers on hashicoprt/terraform registry we can download.
                hashicorp/aws : Lifecycle management of AWS resources, including EC2, Lambda, EKS, ECS, VPC, S3, RDS, DynamoDB, and more. This provider is maintained                     internally by the HashiCorp AWS Provider team.

     - c1-versions.tf mai terraform block and provider bloack likhne ke baad jab hm isse jaake provider ko us-east-1 mai kaam krne ke liye authentication chahiye jo ham         static way mai de skte hai in provider bloack like arguments "access_key" and "secret_key" jo shi way nhi hai .

        correct way ke liye do "aws configure" and enter the region , accesskey and secretkey from your aws console managment. 
        after which the in .aws/credentials have the profile , accesskey and secretkey 

8. resource block :
        - Need resource keyword
        - block label1  : which is the resource type like aws_vpc , aws_instance , aws_s3 , aws_iam_policy etc 
        - block label2 : which should be unique like a variable in java to be used anywhwre in the module scope.
        - Inside block : we have arguments , meta-arguments etc
                Argument reference or arguments are input to the resource . like ami , tags , type etc 
                Attribute references or attributes are the properties jo output niklta hai resource bnne ke baad . We can use these attributes as an output and use it a                   ny where using resourcetype.resource_name.attributename . arn tagsall , private_dns  , instance_state. etc 

    Some imp commands : 
            terraform init
            terraform plan 
            terraform apply -auto-approve
            terraform plan -destroy  : to check  the plan for destroy 
            terraform destroy 
        - terraform.tfstate : it contains the provider and resources create with version . really important file. For now ye file local mai bnti hai . Pr hm isse remove             aws cloud mai store kr skte hai . This file create a biding file for the resources between local tf files and rrmote cloud. help in updating .
            Desired state is the tf files we have and current state if the resource which are available in cloud aws,
        
9. Data Source  : Which is used to get the attribute references for the resource already there in aws cloud . and used that in terraform . This actually shoes the values which is out of terraform like in aws cloud. 
10. Output values : Output values are the return values from the terraform modules and have several uses. Jo modules
Which we can used for multiple ways : 
                        1. To print the values in the console ,console after we ran the terraform apply. output values tf mai daalne ke baad vo console output pr dikhte                         hai jab koi resource bn jata hai aws cloud pr.

11. variables in tf : 
        three types :     
                input variables   : Which we can write as variable and use it like var.etc
                output values 
                local values 
12. Pem key assigned to the ec2 instance can also be used to login to ec2 linux : ssh -i abc.pem ec2-user@ipaddressofec2instance

13. Terraform loop , list .
        
