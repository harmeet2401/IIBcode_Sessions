Integrating HashiCorp Vault with AWS: -------------------

Video about what is hashicopr vault and which problem statements it is resolving and what are the feature it has : https://www.vaultproject.io/

Definatin : vault is the resource which is used to hold secrets . username password , tsl certificates, encryption keys , DB creds  etc 

For generating creds for the user to interact with the AWS services it using various plugin to connect to AWS resources and activat ethe secrets and create the creds for it.

Problem: as below 
1.  : we know that we need many creds for athenticationa and authorization process which includes 
	username and password 
	dB creds 
	TSL certificates 
	API tokens etc or Oauth techniques
	
2. These creds or tokens services are presnet in below repo which are spread across all the different repo apps . 
		DB 
		Git repo 
3. We don't have audit features to know who might have access to these repos so that we can manage who can actually see the creds by an implicit access to the repo.
4. As we know these repo or Db are getting accessed by the APP so the APP is receiving these creds and may be leaking it to the other woorld apps , linke logging it to the openshift log s, splunk logging and those apps are accessible by unwanted users 
5. single creds were shared for many apps . So if the creds got compromised then all app downtime comes in picture if we revoke the creds .
6. Smtime the developer cryptographic the incoming key to encrypt the keys . Which may be improper 


Features resolving above issues by vault : 
1. vault allow the users to keep all the creds in a centralised  vault .
2. it will encrypt the creds or token or ant other certificates at rest and while in transient to 	the APPS.
3. Dynamic ephemeral creds means : the vault sends a dynamic creds to APP consuming it and even if the app leaks it to the splunk while logging those creds would be valid for 30 mins or so as set by the vault users. This will give a bounce back to the hacker to use the same creds for the hack to happn.
4. Unique ceds for multiple app instances . means 40 instances 40 creds .
5. If the creds got compromised for 34th instance then we can revoke the cresd for 34th instance and rest of theinstances will work as is.
6. vault provide key name and corresponding key cryptographic standards to allow apps to do the encryption is any.
		
	
													------------
	how vault looks like : 							Storage unit : for read and write data
												---------------------
												|					|
											    |                   |
				API hit			|        |      |                   |	|        |
		EC VMS --------------->	|        |	    |                   |   |        |
		K8S	 --------------->	|        |      |  Core vault       |   |        |This may contains DB , AWS pluging to dynamically generate the creds as we 
		Etcs ----------		>	| API for|		|                   |   |        | discussed for ephemeral creds 
				API hit			|   apps |      |                   |   | Secrets|Might hit ------> AWS KMS : for encrypt and decrypt the keys
								|		 |      |                   |   |		 |Might hit ------> AWS EC2 : to auto join 
                                |        |      |                   |   |        |Might hit ------> AWS IAM : to create a role for the incoming app request
                                |        |      |                   |   |        |Might hit ------> AWS S3 Bucket : for getting the data like config files etc
                                |        |		|                   |   |        |
                                |        |      |                   |   |        |
                                                |                   |
                                                |                   |
                                                |                   |
												---------------------
													-------------
													Auditing apps
													
													example : splunk or aws cloud watch
													vault will itself thows the
													auditing logs for itself to splunk 
													for example 
													
													


- Master and slaves archicture for Vault is used .
- We can also have Autoscaling and downscaling it as per the need.
- ASg : autoscaling group : which will help in maintaining the desired number of nodes for Vault.
- We can AWS load balancing for the vault node of more then 3 nodes in a cluster 

		(Load balancer) ------------------------------------->node 1
		front id 		------------------------------------->node 2
		backend pool 	------------------------------------->node 3
		health checks

- Security group : this will contains the incoming and outgoing network rules . Its in node level of Ec2 instance level 
- NOTE : IN ORDER TO ALLOW HashiCorp VAULT TO ACCESS THE AWS RESOURCES TO GENERATE KEY ENCRYPTION , USE S3 BUCKETS , KMS RESOURCE THE VAULT NEED ACCESS TO THESE SERVICES IN AWS . WE CAN DO THAT BY FOLLOWING METHODS.:
		1. IAM ROLES : WE CAN ADD ROLE POLICIES HOLDING VAULT ID AND ATTACH IT TO THE RESOURCE IT NEED ACCESS TO.(PREFFERED ONE )
		2 . SECRET ENGINE ROOT CONFIGURATION 
		3. ENV VARIABLES.
			
	
			
	REQUEST APPLICATION 				1.														2.
	REQUEST FOR CREDENTIALS ------------------------>HASHICORP VAULT USING ---------------------------------------------> AWS IAM ROLE SERVICE WILL GENERATE THE 
	FROM HASHICORP VAULT 			   				AWS SECRETS ENGINE 													DYNAMIC EPHEMRAL SECRETS KEY AND PASSWORD 
									4.				USING IAM ROLE WILL						3.
						<----------------------------CONNECT TO AWS <-------------------------------------------------	SEND THE SECRETS BACKT O VAULT
						 ADD THE LEASE OR EXPIRE TIME
						 TO THE DYNAMIC KEY AND PASS
						 SEND IT BACK TO REQUESTING 
						 APP
- Integration vault to AWS cloud watch which is used to generate the metrics and trigger the alarm for it .
	this is actually the audit logging part as described in above diagram.


			vault ------>cloud watch logs ------------> generate metrices -------------> send alarms ----------------> admin peaple.
			
	In metrics we mostly search for the 
		: use of root creds
		: old version of key 
		: resoure code vioation 
		: cloud based resource changes 
		: seal status of vault 
		: permission denied 
		: creation of new root token or creds 
		:  modification of auth method.
		: creation of auth methods.
		
			
	steps 		
		1. create cloud watch log group in aws management console var_audit_log
		2. create the log file audit_file.log
		3. Give permission to this file for vault to read and write user.
		4. enable vault audit enable  file file_path=audit_file.log
		now command :  sudo cat audit_file.log : you will see some logs added 
		5. now set up the cloud watch agent on my local machine  : yaml cloud watch command 
		6. In  cloud watch configuration file at the end : change the file name and the cloud watch log group name we created in step 1 .
		7. sudo systemctl start awslogsd : command to start the cloud watch agent and it will start sending the logs to cloud watch log group in AWS 
		8. Now go to cloud watch create a metrics filter 
		9. click on metrics filter and select set alarm , in alarm select the count of the filtered event above which you need to be alarmed.
		
- vault can also use EC2 metadata to authenticat ethe EC2 instance 




								2. sends metedata info to vault						3. Authenticate with 	
				EC2 instance  ----------------------------------------> Vault ----------------------------->  AWS
					|		  <----------------------------------------					
					|				4. send the token back to EC2
					|
					|1. obtaib docs 
					|
					\/
				ec2 metadata file 

- how vault uses the VPC Endpoint to access AWS KMS service to unwrap the keys .
													------------------------------------------------->INTERNET	
													|													|
													|													|
		|----------------------------------INTERNET GATEWAY-------------|								|
		|                                     /\                         |								|
		|        second aproach               |                          |                              |
        |       |-----------------------------                                                          |
		|       |                                                        |								|
		|       |                                                       |                               |
        |       |                                                        |                              |
		|    VAULT ----------->VPC ENDPOINT-------------------------->AWS KMS <--------------------------
        |               first approach                                  |
		|                                                               |
        |                                                               |
		|                                                               |
        |                                                               |
		|                                                               |
        |                                                               |
		|                                                               |
        |                                                               |
		 ----------------------------------------------------------------
		 
- Configure MFA in vault 

			IAM user ----------------2. Request MFA creds ------> vault 
			    |
                |
                |
                |
                |
                |
                |		1. loginusing creds 
                |--------------------------------> AWS
				|
				|-------------------------------->AWS
					3. submit MFA token 
					
					
- DB sectrets engine for amazon RDS databases.
									1. request dynamic creds form vault for DB 				2. Generate the dynamic creds 
	user / app server / web app --------------------------------------------------> vault -------------------------------->Amazon RDS database
								<--------------------------------------------------
										3. Send the creds back to user
										
								------------------------------------------------------------------------------------------>
										4. use those dynamic creds to loging to the Db 
   Steps : 
	1. Launch a new RdS Db 
	2. Configre vault : 
		a. start the db secrets engine 
			vault secrets enable -path= mysql database.
			vault secrets list 
		b. Connect vault to backend DB 
			vault write mysql/config/mysql-database \
			>plugin_name=mysql-rds-database-plugin \
			>connection_url="{username}" go to aws and open the db and copy the connection url from props \
			>allowed_roles="advanced" \
			>usrename="admin" \
			>password="vaultadvanced"
			enter if not error means the connection from vault to db is successfull.
		c. create role : vault write mysql/roles/advanced \
				>db_name=mysql-database \
				>creation_statement="sql query" \
				>default_ttl="1h" \
				>max_ttl="24h" \
				vault read mysql/roles/advanced
				vault reade mysql/config/mysql-database 
				vault write -f mysql/rotate-root/mysql-database : we rotated the creds 
				vault read mysql/roles/advanced
		d.create the dynamic creds  vault read mysql/creds/advanced 		
		e. We can also rvoke those creds : vault lease revoke 	mysql/roles/advanced/lease_id
		vault lease revoke -prefix mysql/roles/advanced : to revoke all creds 
				
	
	